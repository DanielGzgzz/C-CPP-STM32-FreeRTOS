
Musical_Instrument_Daniel_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008360  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d4  080089d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089dc  080089dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080089e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b4  20000074  08008a58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a28  08008a58  00024a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b2b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f0f  00000000  00000000  00041bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00045ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  000471d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbca  00000000  00000000  00048738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c461  00000000  00000000  00075302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001040a9  00000000  00000000  00091763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019580c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a8  00000000  00000000  0019585c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008518 	.word	0x08008518

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008518 	.word	0x08008518

08000210 <__aeabi_dmul>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000216:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800021a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800021e:	bf1d      	ittte	ne
 8000220:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000224:	ea94 0f0c 	teqne	r4, ip
 8000228:	ea95 0f0c 	teqne	r5, ip
 800022c:	f000 f8de 	bleq	80003ec <__aeabi_dmul+0x1dc>
 8000230:	442c      	add	r4, r5
 8000232:	ea81 0603 	eor.w	r6, r1, r3
 8000236:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800023a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800023e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000242:	bf18      	it	ne
 8000244:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800024c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000250:	d038      	beq.n	80002c4 <__aeabi_dmul+0xb4>
 8000252:	fba0 ce02 	umull	ip, lr, r0, r2
 8000256:	f04f 0500 	mov.w	r5, #0
 800025a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800025e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000262:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000266:	f04f 0600 	mov.w	r6, #0
 800026a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800026e:	f09c 0f00 	teq	ip, #0
 8000272:	bf18      	it	ne
 8000274:	f04e 0e01 	orrne.w	lr, lr, #1
 8000278:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800027c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000280:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000284:	d204      	bcs.n	8000290 <__aeabi_dmul+0x80>
 8000286:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800028a:	416d      	adcs	r5, r5
 800028c:	eb46 0606 	adc.w	r6, r6, r6
 8000290:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000294:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000298:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800029c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a8:	bf88      	it	hi
 80002aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ae:	d81e      	bhi.n	80002ee <__aeabi_dmul+0xde>
 80002b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c8:	ea46 0101 	orr.w	r1, r6, r1
 80002cc:	ea40 0002 	orr.w	r0, r0, r2
 80002d0:	ea81 0103 	eor.w	r1, r1, r3
 80002d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d8:	bfc2      	ittt	gt
 80002da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	popgt	{r4, r5, r6, pc}
 80002e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e8:	f04f 0e00 	mov.w	lr, #0
 80002ec:	3c01      	subs	r4, #1
 80002ee:	f300 80ab 	bgt.w	8000448 <__aeabi_dmul+0x238>
 80002f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002f6:	bfde      	ittt	le
 80002f8:	2000      	movle	r0, #0
 80002fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002fe:	bd70      	pople	{r4, r5, r6, pc}
 8000300:	f1c4 0400 	rsb	r4, r4, #0
 8000304:	3c20      	subs	r4, #32
 8000306:	da35      	bge.n	8000374 <__aeabi_dmul+0x164>
 8000308:	340c      	adds	r4, #12
 800030a:	dc1b      	bgt.n	8000344 <__aeabi_dmul+0x134>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f305 	lsl.w	r3, r0, r5
 8000318:	fa20 f004 	lsr.w	r0, r0, r4
 800031c:	fa01 f205 	lsl.w	r2, r1, r5
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000328:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800032c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000330:	fa21 f604 	lsr.w	r6, r1, r4
 8000334:	eb42 0106 	adc.w	r1, r2, r6
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 040c 	rsb	r4, r4, #12
 8000348:	f1c4 0520 	rsb	r5, r4, #32
 800034c:	fa00 f304 	lsl.w	r3, r0, r4
 8000350:	fa20 f005 	lsr.w	r0, r0, r5
 8000354:	fa01 f204 	lsl.w	r2, r1, r4
 8000358:	ea40 0002 	orr.w	r0, r0, r2
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f1c4 0520 	rsb	r5, r4, #32
 8000378:	fa00 f205 	lsl.w	r2, r0, r5
 800037c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000380:	fa20 f304 	lsr.w	r3, r0, r4
 8000384:	fa01 f205 	lsl.w	r2, r1, r5
 8000388:	ea43 0302 	orr.w	r3, r3, r2
 800038c:	fa21 f004 	lsr.w	r0, r1, r4
 8000390:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000394:	fa21 f204 	lsr.w	r2, r1, r4
 8000398:	ea20 0002 	bic.w	r0, r0, r2
 800039c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f094 0f00 	teq	r4, #0
 80003b0:	d10f      	bne.n	80003d2 <__aeabi_dmul+0x1c2>
 80003b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003b6:	0040      	lsls	r0, r0, #1
 80003b8:	eb41 0101 	adc.w	r1, r1, r1
 80003bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3c01      	subeq	r4, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1a6>
 80003c6:	ea41 0106 	orr.w	r1, r1, r6
 80003ca:	f095 0f00 	teq	r5, #0
 80003ce:	bf18      	it	ne
 80003d0:	4770      	bxne	lr
 80003d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	eb43 0303 	adc.w	r3, r3, r3
 80003dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3d01      	subeq	r5, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1c6>
 80003e6:	ea43 0306 	orr.w	r3, r3, r6
 80003ea:	4770      	bx	lr
 80003ec:	ea94 0f0c 	teq	r4, ip
 80003f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f4:	bf18      	it	ne
 80003f6:	ea95 0f0c 	teqne	r5, ip
 80003fa:	d00c      	beq.n	8000416 <__aeabi_dmul+0x206>
 80003fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000400:	bf18      	it	ne
 8000402:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000406:	d1d1      	bne.n	80003ac <__aeabi_dmul+0x19c>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f04f 0000 	mov.w	r0, #0
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800041a:	bf06      	itte	eq
 800041c:	4610      	moveq	r0, r2
 800041e:	4619      	moveq	r1, r3
 8000420:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000424:	d019      	beq.n	800045a <__aeabi_dmul+0x24a>
 8000426:	ea94 0f0c 	teq	r4, ip
 800042a:	d102      	bne.n	8000432 <__aeabi_dmul+0x222>
 800042c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000430:	d113      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000432:	ea95 0f0c 	teq	r5, ip
 8000436:	d105      	bne.n	8000444 <__aeabi_dmul+0x234>
 8000438:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800043c:	bf1c      	itt	ne
 800043e:	4610      	movne	r0, r2
 8000440:	4619      	movne	r1, r3
 8000442:	d10a      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000444:	ea81 0103 	eor.w	r1, r1, r3
 8000448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800044c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd70      	pop	{r4, r5, r6, pc}
 800045a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800045e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000462:	bd70      	pop	{r4, r5, r6, pc}

08000464 <__aeabi_drsub>:
 8000464:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e002      	b.n	8000470 <__adddf3>
 800046a:	bf00      	nop

0800046c <__aeabi_dsub>:
 800046c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000470 <__adddf3>:
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000476:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	bf1f      	itttt	ne
 8000486:	ea54 0c00 	orrsne.w	ip, r4, r0
 800048a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800048e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000492:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000496:	f000 80e2 	beq.w	800065e <__adddf3+0x1ee>
 800049a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800049e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004a2:	bfb8      	it	lt
 80004a4:	426d      	neglt	r5, r5
 80004a6:	dd0c      	ble.n	80004c2 <__adddf3+0x52>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	ea82 0000 	eor.w	r0, r2, r0
 80004b6:	ea83 0101 	eor.w	r1, r3, r1
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	2d36      	cmp	r5, #54	; 0x36
 80004c4:	bf88      	it	hi
 80004c6:	bd30      	pophi	{r4, r5, pc}
 80004c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x70>
 80004da:	4240      	negs	r0, r0
 80004dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ec:	d002      	beq.n	80004f4 <__adddf3+0x84>
 80004ee:	4252      	negs	r2, r2
 80004f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f4:	ea94 0f05 	teq	r4, r5
 80004f8:	f000 80a7 	beq.w	800064a <__adddf3+0x1da>
 80004fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000500:	f1d5 0e20 	rsbs	lr, r5, #32
 8000504:	db0d      	blt.n	8000522 <__adddf3+0xb2>
 8000506:	fa02 fc0e 	lsl.w	ip, r2, lr
 800050a:	fa22 f205 	lsr.w	r2, r2, r5
 800050e:	1880      	adds	r0, r0, r2
 8000510:	f141 0100 	adc.w	r1, r1, #0
 8000514:	fa03 f20e 	lsl.w	r2, r3, lr
 8000518:	1880      	adds	r0, r0, r2
 800051a:	fa43 f305 	asr.w	r3, r3, r5
 800051e:	4159      	adcs	r1, r3
 8000520:	e00e      	b.n	8000540 <__adddf3+0xd0>
 8000522:	f1a5 0520 	sub.w	r5, r5, #32
 8000526:	f10e 0e20 	add.w	lr, lr, #32
 800052a:	2a01      	cmp	r2, #1
 800052c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000530:	bf28      	it	cs
 8000532:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000536:	fa43 f305 	asr.w	r3, r3, r5
 800053a:	18c0      	adds	r0, r0, r3
 800053c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	d507      	bpl.n	8000556 <__adddf3+0xe6>
 8000546:	f04f 0e00 	mov.w	lr, #0
 800054a:	f1dc 0c00 	rsbs	ip, ip, #0
 800054e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000552:	eb6e 0101 	sbc.w	r1, lr, r1
 8000556:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800055a:	d31b      	bcc.n	8000594 <__adddf3+0x124>
 800055c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000560:	d30c      	bcc.n	800057c <__adddf3+0x10c>
 8000562:	0849      	lsrs	r1, r1, #1
 8000564:	ea5f 0030 	movs.w	r0, r0, rrx
 8000568:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800056c:	f104 0401 	add.w	r4, r4, #1
 8000570:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000574:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000578:	f080 809a 	bcs.w	80006b0 <__adddf3+0x240>
 800057c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	ea41 0105 	orr.w	r1, r1, r5
 8000592:	bd30      	pop	{r4, r5, pc}
 8000594:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000598:	4140      	adcs	r0, r0
 800059a:	eb41 0101 	adc.w	r1, r1, r1
 800059e:	3c01      	subs	r4, #1
 80005a0:	bf28      	it	cs
 80005a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005a6:	d2e9      	bcs.n	800057c <__adddf3+0x10c>
 80005a8:	f091 0f00 	teq	r1, #0
 80005ac:	bf04      	itt	eq
 80005ae:	4601      	moveq	r1, r0
 80005b0:	2000      	moveq	r0, #0
 80005b2:	fab1 f381 	clz	r3, r1
 80005b6:	bf08      	it	eq
 80005b8:	3320      	addeq	r3, #32
 80005ba:	f1a3 030b 	sub.w	r3, r3, #11
 80005be:	f1b3 0220 	subs.w	r2, r3, #32
 80005c2:	da0c      	bge.n	80005de <__adddf3+0x16e>
 80005c4:	320c      	adds	r2, #12
 80005c6:	dd08      	ble.n	80005da <__adddf3+0x16a>
 80005c8:	f102 0c14 	add.w	ip, r2, #20
 80005cc:	f1c2 020c 	rsb	r2, r2, #12
 80005d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d4:	fa21 f102 	lsr.w	r1, r1, r2
 80005d8:	e00c      	b.n	80005f4 <__adddf3+0x184>
 80005da:	f102 0214 	add.w	r2, r2, #20
 80005de:	bfd8      	it	le
 80005e0:	f1c2 0c20 	rsble	ip, r2, #32
 80005e4:	fa01 f102 	lsl.w	r1, r1, r2
 80005e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ec:	bfdc      	itt	le
 80005ee:	ea41 010c 	orrle.w	r1, r1, ip
 80005f2:	4090      	lslle	r0, r2
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	bfa2      	ittt	ge
 80005f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005fc:	4329      	orrge	r1, r5
 80005fe:	bd30      	popge	{r4, r5, pc}
 8000600:	ea6f 0404 	mvn.w	r4, r4
 8000604:	3c1f      	subs	r4, #31
 8000606:	da1c      	bge.n	8000642 <__adddf3+0x1d2>
 8000608:	340c      	adds	r4, #12
 800060a:	dc0e      	bgt.n	800062a <__adddf3+0x1ba>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0220 	rsb	r2, r4, #32
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f302 	lsl.w	r3, r1, r2
 800061c:	ea40 0003 	orr.w	r0, r0, r3
 8000620:	fa21 f304 	lsr.w	r3, r1, r4
 8000624:	ea45 0103 	orr.w	r1, r5, r3
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f1c4 040c 	rsb	r4, r4, #12
 800062e:	f1c4 0220 	rsb	r2, r4, #32
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 f304 	lsl.w	r3, r1, r4
 800063a:	ea40 0003 	orr.w	r0, r0, r3
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	fa21 f004 	lsr.w	r0, r1, r4
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f094 0f00 	teq	r4, #0
 800064e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000652:	bf06      	itte	eq
 8000654:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000658:	3401      	addeq	r4, #1
 800065a:	3d01      	subne	r5, #1
 800065c:	e74e      	b.n	80004fc <__adddf3+0x8c>
 800065e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000662:	bf18      	it	ne
 8000664:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000668:	d029      	beq.n	80006be <__adddf3+0x24e>
 800066a:	ea94 0f05 	teq	r4, r5
 800066e:	bf08      	it	eq
 8000670:	ea90 0f02 	teqeq	r0, r2
 8000674:	d005      	beq.n	8000682 <__adddf3+0x212>
 8000676:	ea54 0c00 	orrs.w	ip, r4, r0
 800067a:	bf04      	itt	eq
 800067c:	4619      	moveq	r1, r3
 800067e:	4610      	moveq	r0, r2
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf1e      	ittt	ne
 8000688:	2100      	movne	r1, #0
 800068a:	2000      	movne	r0, #0
 800068c:	bd30      	popne	{r4, r5, pc}
 800068e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000692:	d105      	bne.n	80006a0 <__adddf3+0x230>
 8000694:	0040      	lsls	r0, r0, #1
 8000696:	4149      	adcs	r1, r1
 8000698:	bf28      	it	cs
 800069a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd30      	pop	{r4, r5, pc}
 80006a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006a4:	bf3c      	itt	cc
 80006a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006aa:	bd30      	popcc	{r4, r5, pc}
 80006ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf1a      	itte	ne
 80006c4:	4619      	movne	r1, r3
 80006c6:	4610      	movne	r0, r2
 80006c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006cc:	bf1c      	itt	ne
 80006ce:	460b      	movne	r3, r1
 80006d0:	4602      	movne	r2, r0
 80006d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006d6:	bf06      	itte	eq
 80006d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006dc:	ea91 0f03 	teqeq	r1, r3
 80006e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	bf00      	nop

080006e8 <__aeabi_ui2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f04f 0500 	mov.w	r5, #0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e750      	b.n	80005a8 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_i2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000720:	bf48      	it	mi
 8000722:	4240      	negmi	r0, r0
 8000724:	f04f 0100 	mov.w	r1, #0
 8000728:	e73e      	b.n	80005a8 <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_f2d>:
 800072c:	0042      	lsls	r2, r0, #1
 800072e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000732:	ea4f 0131 	mov.w	r1, r1, rrx
 8000736:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800073a:	bf1f      	itttt	ne
 800073c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000740:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000744:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000748:	4770      	bxne	lr
 800074a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800074e:	bf08      	it	eq
 8000750:	4770      	bxeq	lr
 8000752:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000756:	bf04      	itt	eq
 8000758:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	e71c      	b.n	80005a8 <__adddf3+0x138>
 800076e:	bf00      	nop

08000770 <__aeabi_ul2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f04f 0500 	mov.w	r5, #0
 800077e:	e00a      	b.n	8000796 <__aeabi_l2d+0x16>

08000780 <__aeabi_l2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800078e:	d502      	bpl.n	8000796 <__aeabi_l2d+0x16>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007a2:	f43f aed8 	beq.w	8000556 <__adddf3+0xe6>
 80007a6:	f04f 0203 	mov.w	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007be:	f1c2 0320 	rsb	r3, r2, #32
 80007c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007c6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ce:	ea40 000e 	orr.w	r0, r0, lr
 80007d2:	fa21 f102 	lsr.w	r1, r1, r2
 80007d6:	4414      	add	r4, r2
 80007d8:	e6bd      	b.n	8000556 <__adddf3+0xe6>
 80007da:	bf00      	nop

080007dc <__aeabi_d2f>:
 80007dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007e4:	bf24      	itt	cs
 80007e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ee:	d90d      	bls.n	800080c <__aeabi_d2f+0x30>
 80007f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000800:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000804:	bf08      	it	eq
 8000806:	f020 0001 	biceq.w	r0, r0, #1
 800080a:	4770      	bx	lr
 800080c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000810:	d121      	bne.n	8000856 <__aeabi_d2f+0x7a>
 8000812:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000816:	bfbc      	itt	lt
 8000818:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800081c:	4770      	bxlt	lr
 800081e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000822:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000826:	f1c2 0218 	rsb	r2, r2, #24
 800082a:	f1c2 0c20 	rsb	ip, r2, #32
 800082e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000832:	fa20 f002 	lsr.w	r0, r0, r2
 8000836:	bf18      	it	ne
 8000838:	f040 0001 	orrne.w	r0, r0, #1
 800083c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000840:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000844:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000848:	ea40 000c 	orr.w	r0, r0, ip
 800084c:	fa23 f302 	lsr.w	r3, r3, r2
 8000850:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000854:	e7cc      	b.n	80007f0 <__aeabi_d2f+0x14>
 8000856:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800085a:	d107      	bne.n	800086c <__aeabi_d2f+0x90>
 800085c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000860:	bf1e      	ittt	ne
 8000862:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000866:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800086a:	4770      	bxne	lr
 800086c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000870:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000874:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 b974 	b.w	8000b7c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468e      	mov	lr, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14d      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	d969      	bls.n	8000994 <__udivmoddi4+0xe8>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b152      	cbz	r2, 80008dc <__udivmoddi4+0x30>
 80008c6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa20 f101 	lsr.w	r1, r0, r1
 80008d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d6:	ea41 0e03 	orr.w	lr, r1, r3
 80008da:	4094      	lsls	r4, r2
 80008dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e0:	0c21      	lsrs	r1, r4, #16
 80008e2:	fbbe f6f8 	udiv	r6, lr, r8
 80008e6:	fa1f f78c 	uxth.w	r7, ip
 80008ea:	fb08 e316 	mls	r3, r8, r6, lr
 80008ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f2:	fb06 f107 	mul.w	r1, r6, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000902:	f080 811f 	bcs.w	8000b44 <__udivmoddi4+0x298>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 811c 	bls.w	8000b44 <__udivmoddi4+0x298>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f707 	mul.w	r7, r0, r7
 8000924:	42a7      	cmp	r7, r4
 8000926:	d90a      	bls.n	800093e <__udivmoddi4+0x92>
 8000928:	eb1c 0404 	adds.w	r4, ip, r4
 800092c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000930:	f080 810a 	bcs.w	8000b48 <__udivmoddi4+0x29c>
 8000934:	42a7      	cmp	r7, r4
 8000936:	f240 8107 	bls.w	8000b48 <__udivmoddi4+0x29c>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000942:	1be4      	subs	r4, r4, r7
 8000944:	2600      	movs	r6, #0
 8000946:	b11d      	cbz	r5, 8000950 <__udivmoddi4+0xa4>
 8000948:	40d4      	lsrs	r4, r2
 800094a:	2300      	movs	r3, #0
 800094c:	e9c5 4300 	strd	r4, r3, [r5]
 8000950:	4631      	mov	r1, r6
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0xc2>
 800095a:	2d00      	cmp	r5, #0
 800095c:	f000 80ef 	beq.w	8000b3e <__udivmoddi4+0x292>
 8000960:	2600      	movs	r6, #0
 8000962:	e9c5 0100 	strd	r0, r1, [r5]
 8000966:	4630      	mov	r0, r6
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	fab3 f683 	clz	r6, r3
 8000972:	2e00      	cmp	r6, #0
 8000974:	d14a      	bne.n	8000a0c <__udivmoddi4+0x160>
 8000976:	428b      	cmp	r3, r1
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xd4>
 800097a:	4282      	cmp	r2, r0
 800097c:	f200 80f9 	bhi.w	8000b72 <__udivmoddi4+0x2c6>
 8000980:	1a84      	subs	r4, r0, r2
 8000982:	eb61 0303 	sbc.w	r3, r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	469e      	mov	lr, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e0      	beq.n	8000950 <__udivmoddi4+0xa4>
 800098e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000992:	e7dd      	b.n	8000950 <__udivmoddi4+0xa4>
 8000994:	b902      	cbnz	r2, 8000998 <__udivmoddi4+0xec>
 8000996:	deff      	udf	#255	; 0xff
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	2a00      	cmp	r2, #0
 800099e:	f040 8092 	bne.w	8000ac6 <__udivmoddi4+0x21a>
 80009a2:	eba1 010c 	sub.w	r1, r1, ip
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2601      	movs	r6, #1
 80009b0:	0c20      	lsrs	r0, r4, #16
 80009b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009b6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009be:	fb0e f003 	mul.w	r0, lr, r3
 80009c2:	4288      	cmp	r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x12a>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2c0>
 80009d6:	4643      	mov	r3, r8
 80009d8:	1a09      	subs	r1, r1, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e0:	fb07 1110 	mls	r1, r7, r0, r1
 80009e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x156>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x154>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2ca>
 8000a00:	4608      	mov	r0, r1
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	e79c      	b.n	8000946 <__udivmoddi4+0x9a>
 8000a0c:	f1c6 0720 	rsb	r7, r6, #32
 8000a10:	40b3      	lsls	r3, r6
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a22:	431c      	orrs	r4, r3
 8000a24:	40f9      	lsrs	r1, r7
 8000a26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a32:	0c20      	lsrs	r0, r4, #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fb09 1118 	mls	r1, r9, r8, r1
 8000a3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a40:	fb08 f00e 	mul.w	r0, r8, lr
 8000a44:	4288      	cmp	r0, r1
 8000a46:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b8>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2bc>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2bc>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	458e      	cmp	lr, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1e2>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2b4>
 8000a86:	458e      	cmp	lr, r1
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2b4>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a92:	fba0 9402 	umull	r9, r4, r0, r2
 8000a96:	eba1 010e 	sub.w	r1, r1, lr
 8000a9a:	42a1      	cmp	r1, r4
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46a6      	mov	lr, r4
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x2a4>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x2a0>
 8000aa4:	b15d      	cbz	r5, 8000abe <__udivmoddi4+0x212>
 8000aa6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000aae:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ab6:	40f1      	lsrs	r1, r6
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e9c5 7100 	strd	r7, r1, [r5]
 8000abe:	2600      	movs	r6, #0
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	40d8      	lsrs	r0, r3
 8000acc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aee:	fb00 f60e 	mul.w	r6, r0, lr
 8000af2:	429e      	cmp	r6, r3
 8000af4:	fa04 f402 	lsl.w	r4, r4, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x260>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b8>
 8000b04:	429e      	cmp	r6, r3
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b8>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1b9b      	subs	r3, r3, r6
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b14:	fb07 3316 	mls	r3, r7, r6, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x28a>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b32:	3e02      	subs	r6, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0x104>
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e705      	b.n	8000950 <__udivmoddi4+0xa4>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e3      	b.n	8000910 <__udivmoddi4+0x64>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6f8      	b.n	800093e <__udivmoddi4+0x92>
 8000b4c:	454b      	cmp	r3, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b5c:	4646      	mov	r6, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x28a>
 8000b60:	4620      	mov	r0, r4
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1e2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b8>
 8000b6c:	3b02      	subs	r3, #2
 8000b6e:	4461      	add	r1, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x12c>
 8000b72:	4630      	mov	r0, r6
 8000b74:	e709      	b.n	800098a <__udivmoddi4+0xde>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x156>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <vApplicationGetIdleTaskMemory+0x2c>)
 8000b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8000b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	20000144 	.word	0x20000144

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bba:	f000 fe58 	bl	800186e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbe:	f000 f845 	bl	8000c4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc2:	f000 fa65 	bl	8001090 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000bc6:	f000 f9fd 	bl	8000fc4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000bca:	f000 fa2f 	bl	800102c <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM3_Init();
 8000bce:	f000 f967 	bl	8000ea0 <_ZL12MX_TIM3_Initv>
  MX_ADC1_Init();
 8000bd2:	f000 f8ad 	bl	8000d30 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000bd6:	f000 f907 	bl	8000de8 <_ZL12MX_ADC2_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <main+0x80>)
 8000bdc:	f107 041c 	add.w	r4, r7, #28
 8000be0:	461d      	mov	r5, r3
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 fa6a 	bl	80060ce <osThreadCreate>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <main+0x84>)
 8000bfe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  /* definition and creation of ADC_To_PWM_Conv INSETED BY THE USER: DANIEL */
   osThreadStaticDef(ADC_To_PWM_Conv, ADC_To_PWM_Conv_Start, osPriorityRealtime, 0, 128, ADC_To_PWM_Conv_Buff, &ADC_To_PWM_Conv_ControlBlock);
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <main+0x88>)
 8000c02:	463c      	mov	r4, r7
 8000c04:	461d      	mov	r5, r3
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   ADC_To_PWM_ConvHandle = osThreadCreate(osThread(ADC_To_PWM_Conv), NULL);
 8000c12:	463b      	mov	r3, r7
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 fa59 	bl	80060ce <osThreadCreate>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <main+0x8c>)
 8000c20:	6013      	str	r3, [r2, #0]


   HAL_ADC_Start_IT(&hadc1);
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <main+0x90>)
 8000c24:	f000 feb8 	bl	8001998 <HAL_ADC_Start_IT>
   HAL_ADC_Start_IT(&hadc2);
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <main+0x94>)
 8000c2a:	f000 feb5 	bl	8001998 <HAL_ADC_Start_IT>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c2e:	f005 fa47 	bl	80060c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <main+0x7e>
 8000c34:	0800854c 	.word	0x0800854c
 8000c38:	200009b0 	.word	0x200009b0
 8000c3c:	08008568 	.word	0x08008568
 8000c40:	20004760 	.word	0x20004760
 8000c44:	20000344 	.word	0x20000344
 8000c48:	2000038c 	.word	0x2000038c

08000c4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	; 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	2230      	movs	r2, #48	; 0x30
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f007 fb92 	bl	8008384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c70:	f001 fefe 	bl	8002a70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <_Z18SystemClock_Configv+0xdc>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a2b      	ldr	r2, [pc, #172]	; (8000d28 <_Z18SystemClock_Configv+0xdc>)
 8000c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <_Z18SystemClock_Configv+0xdc>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <_Z18SystemClock_Configv+0xe0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c94:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <_Z18SystemClock_Configv+0xe0>)
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <_Z18SystemClock_Configv+0xe0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cc0:	2348      	movs	r3, #72	; 0x48
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fedd 	bl	8002a90 <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf14      	ite	ne
 8000cdc:	2301      	movne	r3, #1
 8000cde:	2300      	moveq	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000ce6:	f000 faf5 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 f966 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000d1c:	f000 fada 	bl	80012d4 <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3750      	adds	r7, #80	; 0x50
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <_ZL12MX_ADC1_Initv+0xb0>)
 8000d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <_ZL12MX_ADC1_Initv+0xb4>)
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d90:	4812      	ldr	r0, [pc, #72]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000d92:	f000 fdbd 	bl	8001910 <HAL_ADC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf14      	ite	ne
 8000d9c:	2301      	movne	r3, #1
 8000d9e:	2300      	moveq	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000da6:	f000 fa95 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000daa:	2303      	movs	r3, #3
 8000dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4808      	ldr	r0, [pc, #32]	; (8000ddc <_ZL12MX_ADC1_Initv+0xac>)
 8000dbc:	f000 fff6 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bf14      	ite	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	2300      	moveq	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000dd0:	f000 fa80 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000344 	.word	0x20000344
 8000de0:	40012000 	.word	0x40012000
 8000de4:	0f000001 	.word	0x0f000001

08000de8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <_ZL12MX_ADC2_Initv+0xb0>)
 8000dfe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <_ZL12MX_ADC2_Initv+0xb4>)
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e48:	4812      	ldr	r0, [pc, #72]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e4a:	f000 fd61 	bl	8001910 <HAL_ADC_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 8000e5e:	f000 fa39 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e62:	2304      	movs	r3, #4
 8000e64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4619      	mov	r1, r3
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <_ZL12MX_ADC2_Initv+0xac>)
 8000e74:	f000 ff9a 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf14      	ite	ne
 8000e7e:	2301      	movne	r3, #1
 8000e80:	2300      	moveq	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 8000e88:	f000 fa24 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000038c 	.word	0x2000038c
 8000e98:	40012100 	.word	0x40012100
 8000e9c:	0f000001 	.word	0x0f000001

08000ea0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000ed4:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <_ZL12MX_TIM3_Initv+0x120>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000efa:	4830      	ldr	r0, [pc, #192]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000efc:	f002 feb4 	bl	8003c68 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bf14      	ite	ne
 8000f06:	2301      	movne	r3, #1
 8000f08:	2300      	moveq	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <_ZL12MX_TIM3_Initv+0x74>
  {
    Error_Handler();
 8000f10:	f000 f9e0 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4826      	ldr	r0, [pc, #152]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000f22:	f003 fc1d 	bl	8004760 <HAL_TIM_ConfigClockSource>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bf14      	ite	ne
 8000f2c:	2301      	movne	r3, #1
 8000f2e:	2300      	moveq	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <_ZL12MX_TIM3_Initv+0x9a>
  {
    Error_Handler();
 8000f36:	f000 f9cd 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f3a:	4820      	ldr	r0, [pc, #128]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000f3c:	f002 ff64 	bl	8003e08 <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2301      	movne	r3, #1
 8000f48:	2300      	moveq	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <_ZL12MX_TIM3_Initv+0xb4>
  {
    Error_Handler();
 8000f50:	f000 f9c0 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000f64:	f004 f8a2 	bl	80050ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <_ZL12MX_TIM3_Initv+0xdc>
  {
    Error_Handler();
 8000f78:	f000 f9ac 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7c:	2360      	movs	r3, #96	; 0x60
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000f94:	f003 fad0 	bl	8004538 <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf14      	ite	ne
 8000f9e:	2301      	movne	r3, #1
 8000fa0:	2300      	moveq	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8000fa8:	f000 f994 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <_ZL12MX_TIM3_Initv+0x11c>)
 8000fae:	f000 fa61 	bl	8001474 <HAL_TIM_MspPostInit>

}
 8000fb2:	bf00      	nop
 8000fb4:	3738      	adds	r7, #56	; 0x38
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200003d4 	.word	0x200003d4
 8000fc0:	40000400 	.word	0x40000400

08000fc4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001008:	f004 f8fc 	bl	8005204 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800101c:	f000 f95a 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000420 	.word	0x20000420
 8001028:	40004800 	.word	0x40004800

0800102c <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001036:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800103a:	2206      	movs	r2, #6
 800103c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001040:	2202      	movs	r2, #2
 8001042:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800104c:	2202      	movs	r2, #2
 800104e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001052:	2201      	movs	r2, #1
 8001054:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001064:	2201      	movs	r2, #1
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001070:	f001 fbb6 	bl	80027e0 <HAL_PCD_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8001084:	f000 f926 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200004a8 	.word	0x200004a8

08001090 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b78      	ldr	r3, [pc, #480]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a77      	ldr	r2, [pc, #476]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b75      	ldr	r3, [pc, #468]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a71      	ldr	r2, [pc, #452]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b6f      	ldr	r3, [pc, #444]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	4b6c      	ldr	r3, [pc, #432]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a6b      	ldr	r2, [pc, #428]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b69      	ldr	r3, [pc, #420]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b66      	ldr	r3, [pc, #408]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a65      	ldr	r2, [pc, #404]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b60      	ldr	r3, [pc, #384]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a5f      	ldr	r2, [pc, #380]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a59      	ldr	r2, [pc, #356]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001136:	4b54      	ldr	r3, [pc, #336]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a53      	ldr	r2, [pc, #332]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 800113c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b51      	ldr	r3, [pc, #324]	; (8001288 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f244 0181 	movw	r1, #16513	; 0x4081
 8001154:	484d      	ldr	r0, [pc, #308]	; (800128c <_ZL12MX_GPIO_Initv+0x1fc>)
 8001156:	f001 fb11 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	484c      	ldr	r0, [pc, #304]	; (8001290 <_ZL12MX_GPIO_Initv+0x200>)
 8001160:	f001 fb0c 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4846      	ldr	r0, [pc, #280]	; (8001294 <_ZL12MX_GPIO_Initv+0x204>)
 800117c:	f001 f952 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3_JoystickButton_Pin */
  GPIO_InitStruct.Pin = PF3_JoystickButton_Pin;
 8001180:	2308      	movs	r3, #8
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001184:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118a:	2301      	movs	r3, #1
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PF3_JoystickButton_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4840      	ldr	r0, [pc, #256]	; (8001298 <_ZL12MX_GPIO_Initv+0x208>)
 8001196:	f001 f945 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800119a:	2332      	movs	r3, #50	; 0x32
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4837      	ldr	r0, [pc, #220]	; (8001294 <_ZL12MX_GPIO_Initv+0x204>)
 80011b6:	f001 f935 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011ba:	2386      	movs	r3, #134	; 0x86
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ca:	230b      	movs	r3, #11
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4831      	ldr	r0, [pc, #196]	; (800129c <_ZL12MX_GPIO_Initv+0x20c>)
 80011d6:	f001 f925 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011da:	f244 0381 	movw	r3, #16513	; 0x4081
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4826      	ldr	r0, [pc, #152]	; (800128c <_ZL12MX_GPIO_Initv+0x1fc>)
 80011f4:	f001 f916 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120a:	230b      	movs	r3, #11
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	481d      	ldr	r0, [pc, #116]	; (800128c <_ZL12MX_GPIO_Initv+0x1fc>)
 8001216:	f001 f905 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800121a:	2340      	movs	r3, #64	; 0x40
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4817      	ldr	r0, [pc, #92]	; (8001290 <_ZL12MX_GPIO_Initv+0x200>)
 8001232:	f001 f8f7 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <_ZL12MX_GPIO_Initv+0x200>)
 800124a:	f001 f8eb 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800124e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001260:	230b      	movs	r3, #11
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	4809      	ldr	r0, [pc, #36]	; (8001290 <_ZL12MX_GPIO_Initv+0x200>)
 800126c:	f001 f8da 	bl	8002424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2105      	movs	r1, #5
 8001274:	2009      	movs	r0, #9
 8001276:	f001 f8ab 	bl	80023d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800127a:	2009      	movs	r0, #9
 800127c:	f001 f8c4 	bl	8002408 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3730      	adds	r7, #48	; 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400
 8001290:	40021800 	.word	0x40021800
 8001294:	40020800 	.word	0x40020800
 8001298:	40021400 	.word	0x40021400
 800129c:	40020000 	.word	0x40020000

080012a0 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f004 ff5c 	bl	8006166 <osDelay>
 80012ae:	e7fb      	b.n	80012a8 <_Z16StartDefaultTaskPKv+0x8>

080012b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012c2:	f000 fae1 	bl	8001888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40010000 	.word	0x40010000

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	210f      	movs	r1, #15
 800131a:	f06f 0001 	mvn.w	r0, #1
 800131e:	f001 f857 	bl	80023d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a32      	ldr	r2, [pc, #200]	; (8001418 <HAL_ADC_MspInit+0xe8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12c      	bne.n	80013ac <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001352:	4b32      	ldr	r3, [pc, #200]	; (800141c <HAL_ADC_MspInit+0xec>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a31      	ldr	r2, [pc, #196]	; (800141c <HAL_ADC_MspInit+0xec>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_ADC_MspInit+0xec>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <HAL_ADC_MspInit+0xec>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_ADC_MspInit+0xec>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_ADC_MspInit+0xec>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001382:	2308      	movs	r3, #8
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4822      	ldr	r0, [pc, #136]	; (8001420 <HAL_ADC_MspInit+0xf0>)
 8001396:	f001 f845 	bl	8002424 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2106      	movs	r1, #6
 800139e:	2012      	movs	r0, #18
 80013a0:	f001 f816 	bl	80023d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013a4:	2012      	movs	r0, #18
 80013a6:	f001 f82f 	bl	8002408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013aa:	e030      	b.n	800140e <HAL_ADC_MspInit+0xde>
  else if(hadc->Instance==ADC2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_ADC_MspInit+0xf4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12b      	bne.n	800140e <HAL_ADC_MspInit+0xde>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_ADC_MspInit+0xec>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <HAL_ADC_MspInit+0xec>)
 80013bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_ADC_MspInit+0xec>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_ADC_MspInit+0xec>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <HAL_ADC_MspInit+0xec>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_ADC_MspInit+0xec>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e6:	2310      	movs	r3, #16
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <HAL_ADC_MspInit+0xf0>)
 80013fa:	f001 f813 	bl	8002424 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2106      	movs	r1, #6
 8001402:	2012      	movs	r0, #18
 8001404:	f000 ffe4 	bl	80023d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001408:	2012      	movs	r0, #18
 800140a:	f000 fffd 	bl	8002408 <HAL_NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40012000 	.word	0x40012000
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40012100 	.word	0x40012100

08001428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_TIM_Base_MspInit+0x44>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d113      	bne.n	8001462 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_Base_MspInit+0x48>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_TIM_Base_MspInit+0x48>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_TIM_Base_MspInit+0x48>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2105      	movs	r1, #5
 8001456:	201d      	movs	r0, #29
 8001458:	f000 ffba 	bl	80023d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800145c:	201d      	movs	r0, #29
 800145e:	f000 ffd3 	bl	8002408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40000400 	.word	0x40000400
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_TIM_MspPostInit+0x64>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11b      	bne.n	80014ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_TIM_MspPostInit+0x68>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <HAL_TIM_MspPostInit+0x68>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_TIM_MspPostInit+0x68>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ae:	2340      	movs	r3, #64	; 0x40
 80014b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_TIM_MspPostInit+0x6c>)
 80014ca:	f000 ffab 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40000400 	.word	0x40000400
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0aa      	sub	sp, #168	; 0xa8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	2284      	movs	r2, #132	; 0x84
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f006 ff3d 	bl	8008384 <memset>
  if(huart->Instance==USART3)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_UART_MspInit+0xb4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d13c      	bne.n	800158e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001518:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800151a:	2300      	movs	r3, #0
 800151c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4618      	mov	r0, r3
 8001524:	f001 ffb0 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800152e:	f7ff fed1 	bl	80012d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_UART_MspInit+0xb8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_UART_MspInit+0xb8>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_UART_MspInit+0xb8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_UART_MspInit+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_UART_MspInit+0xb8>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_UART_MspInit+0xb8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001562:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001570:	2301      	movs	r3, #1
 8001572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800157c:	2307      	movs	r3, #7
 800157e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001582:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_UART_MspInit+0xbc>)
 800158a:	f000 ff4b 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	37a8      	adds	r7, #168	; 0xa8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40004800 	.word	0x40004800
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0ac      	sub	sp, #176	; 0xb0
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	2284      	movs	r2, #132	; 0x84
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f006 fedd 	bl	8008384 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d2:	d159      	bne.n	8001688 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 ff4f 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80015f0:	f7ff fe70 	bl	80012d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <HAL_PCD_MspInit+0xec>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <HAL_PCD_MspInit+0xec>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_PCD_MspInit+0xec>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800160c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001626:	230a      	movs	r3, #10
 8001628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001630:	4619      	mov	r1, r3
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <HAL_PCD_MspInit+0xf0>)
 8001634:	f000 fef6 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001650:	4619      	mov	r1, r3
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <HAL_PCD_MspInit+0xf0>)
 8001654:	f000 fee6 	bl	8002424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_PCD_MspInit+0xec>)
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_PCD_MspInit+0xec>)
 800165e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001662:	6353      	str	r3, [r2, #52]	; 0x34
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_PCD_MspInit+0xec>)
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_PCD_MspInit+0xec>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_PCD_MspInit+0xec>)
 8001676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167a:	6453      	str	r3, [r2, #68]	; 0x44
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_PCD_MspInit+0xec>)
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	37b0      	adds	r7, #176	; 0xb0
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <HAL_InitTick+0xcc>)
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	4a2d      	ldr	r2, [pc, #180]	; (8001764 <HAL_InitTick+0xcc>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6453      	str	r3, [r2, #68]	; 0x44
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_InitTick+0xcc>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c0:	f107 020c 	add.w	r2, r7, #12
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 feaa 	bl	8003424 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016d0:	f001 fe94 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80016d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	4a23      	ldr	r2, [pc, #140]	; (8001768 <HAL_InitTick+0xd0>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0c9b      	lsrs	r3, r3, #18
 80016e0:	3b01      	subs	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_InitTick+0xd4>)
 80016e6:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_InitTick+0xd8>)
 80016e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_InitTick+0xd4>)
 80016ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <HAL_InitTick+0xd4>)
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_InitTick+0xd4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_InitTick+0xd4>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_InitTick+0xd4>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800170a:	4818      	ldr	r0, [pc, #96]	; (800176c <HAL_InitTick+0xd4>)
 800170c:	f002 faac 	bl	8003c68 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11b      	bne.n	8001756 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <HAL_InitTick+0xd4>)
 8001720:	f002 fafa 	bl	8003d18 <HAL_TIM_Base_Start_IT>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800172a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800172e:	2b00      	cmp	r3, #0
 8001730:	d111      	bne.n	8001756 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001732:	2019      	movs	r0, #25
 8001734:	f000 fe68 	bl	8002408 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b0f      	cmp	r3, #15
 800173c:	d808      	bhi.n	8001750 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800173e:	2200      	movs	r2, #0
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	2019      	movs	r0, #25
 8001744:	f000 fe44 	bl	80023d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_InitTick+0xdc>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e002      	b.n	8001756 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800175a:	4618      	mov	r0, r3
 800175c:	3730      	adds	r7, #48	; 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	431bde83 	.word	0x431bde83
 800176c:	200009b4 	.word	0x200009b4
 8001770:	40010000 	.word	0x40010000
 8001774:	20000004 	.word	0x20000004

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler+0x4>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler+0x4>

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PF3_JoystickButton_Pin);
 80017a8:	2008      	movs	r0, #8
 80017aa:	f001 f801 	bl	80027b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <ADC_IRQHandler+0x14>)
 80017ba:	f000 f9c5 	bl	8001b48 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017be:	4803      	ldr	r0, [pc, #12]	; (80017cc <ADC_IRQHandler+0x18>)
 80017c0:	f000 f9c2 	bl	8001b48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000344 	.word	0x20000344
 80017cc:	2000038c 	.word	0x2000038c

080017d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017d6:	f002 fd8f 	bl	80042f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200009b4 	.word	0x200009b4

080017e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM3_IRQHandler+0x10>)
 80017ea:	f002 fd85 	bl	80042f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200003d4 	.word	0x200003d4

080017f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001854 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001838:	4c0b      	ldr	r4, [pc, #44]	; (8001868 <LoopFillZerobss+0x26>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001846:	f7ff ffd7 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184a:	f006 fd75 	bl	8008338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184e:	f7ff f9b1 	bl	8000bb4 <main>
  bx  lr    
 8001852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001860:	080089e4 	.word	0x080089e4
  ldr r2, =_sbss
 8001864:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001868:	20004a28 	.word	0x20004a28

0800186c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800186c:	e7fe      	b.n	800186c <CAN1_RX0_IRQHandler>

0800186e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001872:	2003      	movs	r0, #3
 8001874:	f000 fda1 	bl	80023ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001878:	200f      	movs	r0, #15
 800187a:	f7ff ff0d 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187e:	f7ff fd2f 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000a00 	.word	0x20000a00

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000a00 	.word	0x20000a00

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e031      	b.n	800198a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fcfe 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_ADC_Init+0x84>)
 8001954:	4013      	ands	r3, r2
 8001956:	f043 0202 	orr.w	r2, r3, #2
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fb7a 	bl	8002058 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	f043 0201 	orr.w	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
 800197a:	e001      	b.n	8001980 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	ffffeefd 	.word	0xffffeefd

08001998 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Start_IT+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e0b5      	b.n	8001b1e <HAL_ADC_Start_IT+0x186>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d018      	beq.n	80019fa <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019d8:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_ADC_Start_IT+0x194>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a54      	ldr	r2, [pc, #336]	; (8001b30 <HAL_ADC_Start_IT+0x198>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0c9a      	lsrs	r2, r3, #18
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d17d      	bne.n	8001b04 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0c:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_ADC_Start_IT+0x19c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a42:	d106      	bne.n	8001a52 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f023 0206 	bic.w	r2, r3, #6
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a68:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_ADC_Start_IT+0x1a0>)
 8001a76:	430b      	orrs	r3, r1
 8001a78:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_ADC_Start_IT+0x1a4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d143      	bne.n	8001b1c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	e03a      	b.n	8001b1c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <HAL_ADC_Start_IT+0x1a8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d10e      	bne.n	8001ace <HAL_ADC_Start_IT+0x136>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001acc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_ADC_Start_IT+0x1a4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d120      	bne.n	8001b1c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_ADC_Start_IT+0x1ac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d11b      	bne.n	8001b1c <HAL_ADC_Start_IT+0x184>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d114      	bne.n	8001b1c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	e00b      	b.n	8001b1c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	431bde83 	.word	0x431bde83
 8001b34:	fffff8fe 	.word	0xfffff8fe
 8001b38:	04000020 	.word	0x04000020
 8001b3c:	40012300 	.word	0x40012300
 8001b40:	40012000 	.word	0x40012000
 8001b44:	40012200 	.word	0x40012200

08001b48 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d049      	beq.n	8001c12 <HAL_ADC_IRQHandler+0xca>
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d046      	beq.n	8001c12 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d12b      	bne.n	8001c02 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d127      	bne.n	8001c02 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d119      	bne.n	8001c02 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0220 	bic.w	r2, r2, #32
 8001bdc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f005 fd56 	bl	80076b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0212 	mvn.w	r2, #18
 8001c10:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c20:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d057      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x190>
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d054      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d139      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d12b      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d124      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11d      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d119      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fabf 	bl	800224c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 020c 	mvn.w	r2, #12
 8001cd6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d017      	beq.n	8001d1e <HAL_ADC_IRQHandler+0x1d6>
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f837 	bl	8001d82 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0201 	mvn.w	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d2c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x218>
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d012      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f043 0202 	orr.w	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0220 	mvn.w	r2, #32
 8001d4e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f820 	bl	8001d96 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 0220 	mvn.w	r2, #32
 8001d5e:	601a      	str	r2, [r3, #0]
  }
}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1c>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e136      	b.n	8002036 <HAL_ADC_ConfigChannel+0x28a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d93a      	bls.n	8001e4e <HAL_ADC_ConfigChannel+0xa2>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001de0:	d035      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68d9      	ldr	r1, [r3, #12]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	2207      	movs	r2, #7
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a8d      	ldr	r2, [pc, #564]	; (8002044 <HAL_ADC_ConfigChannel+0x298>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10a      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68d9      	ldr	r1, [r3, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	061a      	lsls	r2, r3, #24
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e26:	e035      	b.n	8001e94 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68d9      	ldr	r1, [r3, #12]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4403      	add	r3, r0
 8001e40:	3b1e      	subs	r3, #30
 8001e42:	409a      	lsls	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e4c:	e022      	b.n	8001e94 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6919      	ldr	r1, [r3, #16]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	2207      	movs	r2, #7
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	400a      	ands	r2, r1
 8001e70:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6919      	ldr	r1, [r3, #16]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4403      	add	r3, r0
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b05      	subs	r3, #5
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b05      	subs	r3, #5
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee4:	e04c      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d824      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b23      	subs	r3, #35	; 0x23
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b23      	subs	r3, #35	; 0x23
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
 8001f36:	e023      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	3b41      	subs	r3, #65	; 0x41
 8001f4a:	221f      	movs	r2, #31
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43da      	mvns	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	400a      	ands	r2, r1
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b41      	subs	r3, #65	; 0x41
 8001f74:	fa00 f203 	lsl.w	r2, r0, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_ADC_ConfigChannel+0x29c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10a      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1f4>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a2c      	ldr	r2, [pc, #176]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f9a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f9e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_ADC_ConfigChannel+0x29c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10f      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x21e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b12      	cmp	r3, #18
 8001fb0:	d10b      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4a25      	ldr	r2, [pc, #148]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fb8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fbc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <HAL_ADC_ConfigChannel+0x29c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d12b      	bne.n	800202c <HAL_ADC_ConfigChannel+0x280>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_ADC_ConfigChannel+0x298>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x23a>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b11      	cmp	r3, #17
 8001fe4:	d122      	bne.n	800202c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ff0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ffc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_ADC_ConfigChannel+0x298>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d111      	bne.n	800202c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_ADC_ConfigChannel+0x2a4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_ADC_ConfigChannel+0x2a8>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9a      	lsrs	r2, r3, #18
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800201e:	e002      	b.n	8002026 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3b01      	subs	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	10000012 	.word	0x10000012
 8002048:	40012000 	.word	0x40012000
 800204c:	40012300 	.word	0x40012300
 8002050:	20000000 	.word	0x20000000
 8002054:	431bde83 	.word	0x431bde83

08002058 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002060:	4b78      	ldr	r3, [pc, #480]	; (8002244 <ADC_Init+0x1ec>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a77      	ldr	r2, [pc, #476]	; (8002244 <ADC_Init+0x1ec>)
 8002066:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800206a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800206c:	4b75      	ldr	r3, [pc, #468]	; (8002244 <ADC_Init+0x1ec>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4973      	ldr	r1, [pc, #460]	; (8002244 <ADC_Init+0x1ec>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002088:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	021a      	lsls	r2, r3, #8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	4a58      	ldr	r2, [pc, #352]	; (8002248 <ADC_Init+0x1f0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800211c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	e00f      	b.n	8002152 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002150:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0202 	bic.w	r2, r2, #2
 8002160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	005a      	lsls	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01b      	beq.n	80021b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800219e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	3b01      	subs	r3, #1
 80021ac:	035a      	lsls	r2, r3, #13
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	e007      	b.n	80021c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	051a      	lsls	r2, r3, #20
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6899      	ldr	r1, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800220a:	025a      	lsls	r2, r3, #9
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	029a      	lsls	r2, r3, #10
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40012300 	.word	0x40012300
 8002248:	0f000001 	.word	0x0f000001

0800224c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	4313      	orrs	r3, r2
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	05fa0000 	.word	0x05fa0000

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff4c 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e2:	f7ff ff61 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 80023e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f7ff ffb1 	bl	8002354 <NVIC_EncodePriority>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff80 	bl	8002300 <__NVIC_SetPriority>
}
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff54 	bl	80022c4 <__NVIC_EnableIRQ>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e175      	b.n	8002730 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	f040 8164 	bne.w	800272a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d005      	beq.n	800247a <HAL_GPIO_Init+0x56>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d130      	bne.n	80024dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 0201 	and.w	r2, r3, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d017      	beq.n	8002518 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d123      	bne.n	800256c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	69b9      	ldr	r1, [r7, #24]
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80be 	beq.w	800272a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	4b66      	ldr	r3, [pc, #408]	; (8002748 <HAL_GPIO_Init+0x324>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a65      	ldr	r2, [pc, #404]	; (8002748 <HAL_GPIO_Init+0x324>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_GPIO_Init+0x324>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025c6:	4a61      	ldr	r2, [pc, #388]	; (800274c <HAL_GPIO_Init+0x328>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_GPIO_Init+0x32c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d037      	beq.n	8002662 <HAL_GPIO_Init+0x23e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a57      	ldr	r2, [pc, #348]	; (8002754 <HAL_GPIO_Init+0x330>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d031      	beq.n	800265e <HAL_GPIO_Init+0x23a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a56      	ldr	r2, [pc, #344]	; (8002758 <HAL_GPIO_Init+0x334>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02b      	beq.n	800265a <HAL_GPIO_Init+0x236>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a55      	ldr	r2, [pc, #340]	; (800275c <HAL_GPIO_Init+0x338>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x232>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a54      	ldr	r2, [pc, #336]	; (8002760 <HAL_GPIO_Init+0x33c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x22e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a53      	ldr	r2, [pc, #332]	; (8002764 <HAL_GPIO_Init+0x340>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x22a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_GPIO_Init+0x344>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x226>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a51      	ldr	r2, [pc, #324]	; (800276c <HAL_GPIO_Init+0x348>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x222>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a50      	ldr	r2, [pc, #320]	; (8002770 <HAL_GPIO_Init+0x34c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x21e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <HAL_GPIO_Init+0x350>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x21a>
 800263a:	2309      	movs	r3, #9
 800263c:	e012      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800263e:	230a      	movs	r3, #10
 8002640:	e010      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002642:	2308      	movs	r3, #8
 8002644:	e00e      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002646:	2307      	movs	r3, #7
 8002648:	e00c      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800264a:	2306      	movs	r3, #6
 800264c:	e00a      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800264e:	2305      	movs	r3, #5
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002652:	2304      	movs	r3, #4
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x240>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x240>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	; (800274c <HAL_GPIO_Init+0x328>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_GPIO_Init+0x354>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a34      	ldr	r2, [pc, #208]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a29      	ldr	r2, [pc, #164]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fa:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_GPIO_Init+0x354>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_GPIO_Init+0x354>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_GPIO_Init+0x354>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f ae86 	bls.w	8002444 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40021c00 	.word	0x40021c00
 8002770:	40022000 	.word	0x40022000
 8002774:	40022400 	.word	0x40022400
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002798:	e003      	b.n	80027a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	041a      	lsls	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 ff56 	bl	8007680 <HAL_GPIO_EXTI_Callback>
  }
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40013c00 	.word	0x40013c00

080027e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e2:	b08f      	sub	sp, #60	; 0x3c
 80027e4:	af0a      	add	r7, sp, #40	; 0x28
 80027e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e116      	b.n	8002a20 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fe fec9 	bl	80015a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2203      	movs	r2, #3
 8002816:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 f991 	bl	8005b58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	687e      	ldr	r6, [r7, #4]
 800283e:	466d      	mov	r5, sp
 8002840:	f106 0410 	add.w	r4, r6, #16
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002850:	e885 0003 	stmia.w	r5, {r0, r1}
 8002854:	1d33      	adds	r3, r6, #4
 8002856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002858:	6838      	ldr	r0, [r7, #0]
 800285a:	f003 f925 	bl	8005aa8 <USB_CoreInit>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0d7      	b.n	8002a20 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f003 f97f 	bl	8005b7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e04a      	b.n	8002918 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	333d      	adds	r3, #61	; 0x3d
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	333c      	adds	r3, #60	; 0x3c
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	b298      	uxth	r0, r3
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3344      	adds	r3, #68	; 0x44
 80028be:	4602      	mov	r2, r0
 80028c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	3340      	adds	r3, #64	; 0x40
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3348      	adds	r3, #72	; 0x48
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	334c      	adds	r3, #76	; 0x4c
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3354      	adds	r3, #84	; 0x54
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	3301      	adds	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3af      	bcc.n	8002882 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e044      	b.n	80029b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	3301      	adds	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d3b5      	bcc.n	8002928 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	687e      	ldr	r6, [r7, #4]
 80029c4:	466d      	mov	r5, sp
 80029c6:	f106 0410 	add.w	r4, r6, #16
 80029ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029da:	1d33      	adds	r3, r6, #4
 80029dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f003 f918 	bl	8005c14 <USB_DevInit>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e014      	b.n	8002a20 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d102      	bne.n	8002a14 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f80a 	bl	8002a28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fad6 	bl	8005fca <USB_DevDisconnect>

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_PCDEx_ActivateLPM+0x44>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	10000003 	.word	0x10000003

08002a70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40007000 	.word	0x40007000

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e291      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8087 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab4:	4b96      	ldr	r3, [pc, #600]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00c      	beq.n	8002ada <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac0:	4b93      	ldr	r3, [pc, #588]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d112      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62>
 8002acc:	4b90      	ldr	r3, [pc, #576]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad8:	d10b      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ada:	4b8d      	ldr	r3, [pc, #564]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d06c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x130>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d168      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e26b      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x7a>
 8002afc:	4b84      	ldr	r3, [pc, #528]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a83      	ldr	r2, [pc, #524]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e02e      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x9c>
 8002b12:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7e      	ldr	r2, [pc, #504]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b7c      	ldr	r3, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7b      	ldr	r2, [pc, #492]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b36:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a75      	ldr	r2, [pc, #468]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a72      	ldr	r2, [pc, #456]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b50:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6b      	ldr	r2, [pc, #428]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fe9e 	bl	80018b0 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fe9a 	bl	80018b0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e21f      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xe8>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fe8a 	bl	80018b0 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fe86 	bl	80018b0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e20b      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x110>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d069      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d11c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x190>
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d116      	bne.n	8002c20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x17a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1df      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	493d      	ldr	r1, [pc, #244]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	e040      	b.n	8002ca2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d023      	beq.n	8002c70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c28:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a38      	ldr	r2, [pc, #224]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fe3c 	bl	80018b0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fe38 	bl	80018b0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1bd      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4929      	ldr	r1, [pc, #164]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
 8002c6e:	e018      	b.n	8002ca2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fe18 	bl	80018b0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fe14 	bl	80018b0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e199      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d038      	beq.n	8002d20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d019      	beq.n	8002cea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cba:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fdf5 	bl	80018b0 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cca:	f7fe fdf1 	bl	80018b0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e176      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x23a>
 8002ce8:	e01a      	b.n	8002d20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fddb 	bl	80018b0 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fdd7 	bl	80018b0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d903      	bls.n	8002d14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e15c      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
 8002d10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	4b91      	ldr	r3, [pc, #580]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1ee      	bne.n	8002cfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a4 	beq.w	8002e76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2e:	4b8b      	ldr	r3, [pc, #556]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a87      	ldr	r2, [pc, #540]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b85      	ldr	r3, [pc, #532]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d56:	4b82      	ldr	r3, [pc, #520]	; (8002f60 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d62:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7e      	ldr	r2, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fd9f 	bl	80018b0 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe fd9b 	bl	80018b0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e120      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d88:	4b75      	ldr	r3, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x4d0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x31a>
 8002d9c:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a6e      	ldr	r2, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	e02d      	b.n	8002e06 <HAL_RCC_OscConfig+0x376>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x33c>
 8002db2:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a69      	ldr	r2, [pc, #420]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbe:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a66      	ldr	r2, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	e01c      	b.n	8002e06 <HAL_RCC_OscConfig+0x376>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d10c      	bne.n	8002dee <HAL_RCC_OscConfig+0x35e>
 8002dd4:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a60      	ldr	r2, [pc, #384]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a5d      	ldr	r2, [pc, #372]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
 8002dec:	e00b      	b.n	8002e06 <HAL_RCC_OscConfig+0x376>
 8002dee:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a5a      	ldr	r2, [pc, #360]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a57      	ldr	r2, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d015      	beq.n	8002e3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fd4f 	bl	80018b0 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fd4b 	bl	80018b0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0ce      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ee      	beq.n	8002e16 <HAL_RCC_OscConfig+0x386>
 8002e38:	e014      	b.n	8002e64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fd39 	bl	80018b0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe fd35 	bl	80018b0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0b8      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e58:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ee      	bne.n	8002e42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d105      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6a:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80a4 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d06b      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d149      	bne.n	8002f28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a30      	ldr	r2, [pc, #192]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fd06 	bl	80018b0 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fd02 	bl	80018b0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e087      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	4313      	orrs	r3, r2
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ef2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fcd6 	bl	80018b0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fcd2 	bl	80018b0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e057      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x478>
 8002f26:	e04f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fcbc 	bl	80018b0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fcb8 	bl	80018b0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e03d      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_OscConfig+0x4cc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4ac>
 8002f5a:	e035      	b.n	8002fc8 <HAL_RCC_OscConfig+0x538>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x544>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d028      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d121      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d111      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0d0      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b6a      	ldr	r3, [pc, #424]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d910      	bls.n	8003020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b67      	ldr	r3, [pc, #412]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 020f 	bic.w	r2, r3, #15
 8003006:	4965      	ldr	r1, [pc, #404]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b8      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003038:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800303e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a52      	ldr	r2, [pc, #328]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	494d      	ldr	r1, [pc, #308]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d040      	beq.n	80030fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d115      	bne.n	80030ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e073      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030aa:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06b      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4936      	ldr	r1, [pc, #216]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fe fbf0 	bl	80018b0 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7fe fbec 	bl	80018b0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e053      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 020c 	and.w	r2, r3, #12
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d1eb      	bne.n	80030d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d210      	bcs.n	800312c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 020f 	bic.w	r2, r3, #15
 8003112:	4922      	ldr	r1, [pc, #136]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e032      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4916      	ldr	r1, [pc, #88]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	490e      	ldr	r1, [pc, #56]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800316a:	f000 f821 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800316e:	4602      	mov	r2, r0
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	490a      	ldr	r1, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x1cc>)
 800317c:	5ccb      	ldrb	r3, [r1, r3]
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1d4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fa84 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	0800858c 	.word	0x0800858c
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000004 	.word	0x20000004

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b4:	b094      	sub	sp, #80	; 0x50
 80031b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	647b      	str	r3, [r7, #68]	; 0x44
 80031bc:	2300      	movs	r3, #0
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c0:	2300      	movs	r3, #0
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c8:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d00d      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x40>
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	f200 80e1 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x1ec>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x34>
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x3a>
 80031e2:	e0db      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031e8:	e0db      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ea:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ee:	e0d8      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031fa:	4b6d      	ldr	r3, [pc, #436]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d063      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	2200      	movs	r2, #0
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003210:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
 800321a:	2300      	movs	r3, #0
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003222:	4622      	mov	r2, r4
 8003224:	462b      	mov	r3, r5
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	0159      	lsls	r1, r3, #5
 8003230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003234:	0150      	lsls	r0, r2, #5
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4621      	mov	r1, r4
 800323c:	1a51      	subs	r1, r2, r1
 800323e:	6139      	str	r1, [r7, #16]
 8003240:	4629      	mov	r1, r5
 8003242:	eb63 0301 	sbc.w	r3, r3, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003254:	4659      	mov	r1, fp
 8003256:	018b      	lsls	r3, r1, #6
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800325e:	4651      	mov	r1, sl
 8003260:	018a      	lsls	r2, r1, #6
 8003262:	4651      	mov	r1, sl
 8003264:	ebb2 0801 	subs.w	r8, r2, r1
 8003268:	4659      	mov	r1, fp
 800326a:	eb63 0901 	sbc.w	r9, r3, r1
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800327e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003282:	4690      	mov	r8, r2
 8003284:	4699      	mov	r9, r3
 8003286:	4623      	mov	r3, r4
 8003288:	eb18 0303 	adds.w	r3, r8, r3
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	462b      	mov	r3, r5
 8003290:	eb49 0303 	adc.w	r3, r9, r3
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032a2:	4629      	mov	r1, r5
 80032a4:	024b      	lsls	r3, r1, #9
 80032a6:	4621      	mov	r1, r4
 80032a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ac:	4621      	mov	r1, r4
 80032ae:	024a      	lsls	r2, r1, #9
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c0:	f7fd fadc 	bl	800087c <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032cc:	e058      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	2200      	movs	r2, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	4611      	mov	r1, r2
 80032da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0159      	lsls	r1, r3, #5
 80032f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fa:	0150      	lsls	r0, r2, #5
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4641      	mov	r1, r8
 8003302:	ebb2 0a01 	subs.w	sl, r2, r1
 8003306:	4649      	mov	r1, r9
 8003308:	eb63 0b01 	sbc.w	fp, r3, r1
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800331c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003320:	ebb2 040a 	subs.w	r4, r2, sl
 8003324:	eb63 050b 	sbc.w	r5, r3, fp
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	00eb      	lsls	r3, r5, #3
 8003332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003336:	00e2      	lsls	r2, r4, #3
 8003338:	4614      	mov	r4, r2
 800333a:	461d      	mov	r5, r3
 800333c:	4643      	mov	r3, r8
 800333e:	18e3      	adds	r3, r4, r3
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	464b      	mov	r3, r9
 8003344:	eb45 0303 	adc.w	r3, r5, r3
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003356:	4629      	mov	r1, r5
 8003358:	028b      	lsls	r3, r1, #10
 800335a:	4621      	mov	r1, r4
 800335c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003360:	4621      	mov	r1, r4
 8003362:	028a      	lsls	r2, r1, #10
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336a:	2200      	movs	r2, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	61fa      	str	r2, [r7, #28]
 8003370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003374:	f7fd fa82 	bl	800087c <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3750      	adds	r7, #80	; 0x50
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	0800859c 	.word	0x0800859c

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	0800859c 	.word	0x0800859c

08003424 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	220f      	movs	r2, #15
 8003432:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_GetClockConfig+0x5c>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	08db      	lsrs	r3, r3, #3
 800345e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_RCC_GetClockConfig+0x60>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 020f 	and.w	r2, r3, #15
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40023c00 	.word	0x40023c00

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b0:	4b69      	ldr	r3, [pc, #420]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a68      	ldr	r2, [pc, #416]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ba:	6093      	str	r3, [r2, #8]
 80034bc:	4b66      	ldr	r3, [pc, #408]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	4964      	ldr	r1, [pc, #400]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d017      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e2:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	4959      	ldr	r1, [pc, #356]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003500:	d101      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003502:	2301      	movs	r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800351e:	4b4e      	ldr	r3, [pc, #312]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003524:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	494a      	ldr	r1, [pc, #296]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353c:	d101      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 808b 	beq.w	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	4a39      	ldr	r2, [pc, #228]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	6413      	str	r3, [r2, #64]	; 0x40
 8003578:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800358a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003590:	f7fe f98e 	bl	80018b0 <HAL_GetTick>
 8003594:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003598:	f7fe f98a 	bl	80018b0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e357      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d035      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d02e      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d4:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d114      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe f952 	bl	80018b0 <HAL_GetTick>
 800360c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fe f94e 	bl	80018b0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e319      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ee      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363e:	d111      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800364e:	400b      	ands	r3, r1
 8003650:	4901      	ldr	r1, [pc, #4]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
 8003656:	e00b      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003658:	40023800 	.word	0x40023800
 800365c:	40007000 	.word	0x40007000
 8003660:	0ffffcff 	.word	0x0ffffcff
 8003664:	4baa      	ldr	r3, [pc, #680]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4aa9      	ldr	r2, [pc, #676]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800366e:	6093      	str	r3, [r2, #8]
 8003670:	4ba7      	ldr	r3, [pc, #668]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367c:	49a4      	ldr	r1, [pc, #656]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367e:	4313      	orrs	r3, r2
 8003680:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800368e:	4ba0      	ldr	r3, [pc, #640]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	4a9e      	ldr	r2, [pc, #632]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800369e:	4b9c      	ldr	r3, [pc, #624]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	4999      	ldr	r1, [pc, #612]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036bc:	4b94      	ldr	r3, [pc, #592]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ca:	4991      	ldr	r1, [pc, #580]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036de:	4b8c      	ldr	r3, [pc, #560]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ec:	4988      	ldr	r1, [pc, #544]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003700:	4b83      	ldr	r3, [pc, #524]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370e:	4980      	ldr	r1, [pc, #512]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003722:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4977      	ldr	r1, [pc, #476]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003744:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	496f      	ldr	r1, [pc, #444]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003766:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f023 020c 	bic.w	r2, r3, #12
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	4966      	ldr	r1, [pc, #408]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003788:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	495e      	ldr	r1, [pc, #376]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037aa:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	4955      	ldr	r1, [pc, #340]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	494d      	ldr	r1, [pc, #308]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037ee:	4b48      	ldr	r3, [pc, #288]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4944      	ldr	r1, [pc, #272]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003810:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	493c      	ldr	r1, [pc, #240]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	4933      	ldr	r1, [pc, #204]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003862:	492b      	ldr	r1, [pc, #172]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d011      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003884:	4922      	ldr	r1, [pc, #136]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003894:	d101      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	4912      	ldr	r1, [pc, #72]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e8:	4909      	ldr	r1, [pc, #36]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d006      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80d9 	beq.w	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a01      	ldr	r2, [pc, #4]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800390e:	e001      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003910:	40023800 	.word	0x40023800
 8003914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003916:	f7fd ffcb 	bl	80018b0 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800391e:	f7fd ffc7 	bl	80018b0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b64      	cmp	r3, #100	; 0x64
 800392a:	d901      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e194      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003930:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d021      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11d      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800395e:	4b61      	ldr	r3, [pc, #388]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003964:	0e1b      	lsrs	r3, r3, #24
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	019a      	lsls	r2, r3, #6
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	071b      	lsls	r3, r3, #28
 8003984:	4957      	ldr	r1, [pc, #348]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02e      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b6:	d129      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039b8:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039cc:	0f1b      	lsrs	r3, r3, #28
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	019a      	lsls	r2, r3, #6
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	071b      	lsls	r3, r3, #28
 80039ec:	493d      	ldr	r1, [pc, #244]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039f4:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039fa:	f023 021f 	bic.w	r2, r3, #31
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	3b01      	subs	r3, #1
 8003a04:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a18:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1e:	0e1b      	lsrs	r3, r3, #24
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2c:	0f1b      	lsrs	r3, r3, #28
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	019a      	lsls	r2, r3, #6
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	431a      	orrs	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	071b      	lsls	r3, r3, #28
 8003a4c:	4925      	ldr	r1, [pc, #148]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d011      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	019a      	lsls	r2, r3, #6
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	071b      	lsls	r3, r3, #28
 8003a7c:	4919      	ldr	r1, [pc, #100]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fd ff0e 	bl	80018b0 <HAL_GetTick>
 8003a94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a98:	f7fd ff0a 	bl	80018b0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0d7      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	f040 80cd 	bne.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aca:	f7fd fef1 	bl	80018b0 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ad2:	f7fd feed 	bl	80018b0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d903      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0ba      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ae4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ae8:	4b5e      	ldr	r3, [pc, #376]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af4:	d0ed      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d02e      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d12a      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b1e:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	0f1b      	lsrs	r3, r3, #28
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	4944      	ldr	r1, [pc, #272]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b5a:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	493d      	ldr	r1, [pc, #244]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d022      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b88:	d11d      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	0e1b      	lsrs	r3, r3, #24
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b98:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	0f1b      	lsrs	r3, r3, #28
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	019a      	lsls	r2, r3, #6
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	071b      	lsls	r3, r3, #28
 8003bbe:	4929      	ldr	r1, [pc, #164]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bd2:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	019a      	lsls	r2, r3, #6
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	071b      	lsls	r3, r3, #28
 8003c06:	4917      	ldr	r1, [pc, #92]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4911      	ldr	r1, [pc, #68]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fe3e 	bl	80018b0 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c38:	f7fd fe3a 	bl	80018b0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e007      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c56:	d1ef      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e049      	b.n	8003d0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fbca 	bl	8001428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f000 fe42 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e054      	b.n	8003dda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d01d      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <HAL_TIM_Base_Start_IT+0xd4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <HAL_TIM_Base_Start_IT+0xe4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x80>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d115      	bne.n	8003dc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_TIM_Base_Start_IT+0xec>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d015      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0xbe>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d011      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	e008      	b.n	8003dd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e000      	b.n	8003dd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40000c00 	.word	0x40000c00
 8003df8:	40010400 	.word	0x40010400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40001800 	.word	0x40001800
 8003e04:	00010007 	.word	0x00010007

08003e08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e049      	b.n	8003eae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f841 	bl	8003eb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fd72 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_TIM_PWM_Start_IT+0x28>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e03c      	b.n	8003f6e <HAL_TIM_PWM_Start_IT+0xa2>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d109      	bne.n	8003f0e <HAL_TIM_PWM_Start_IT+0x42>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	bf14      	ite	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	2300      	moveq	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	e02f      	b.n	8003f6e <HAL_TIM_PWM_Start_IT+0xa2>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d109      	bne.n	8003f28 <HAL_TIM_PWM_Start_IT+0x5c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e022      	b.n	8003f6e <HAL_TIM_PWM_Start_IT+0xa2>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d109      	bne.n	8003f42 <HAL_TIM_PWM_Start_IT+0x76>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e015      	b.n	8003f6e <HAL_TIM_PWM_Start_IT+0xa2>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d109      	bne.n	8003f5c <HAL_TIM_PWM_Start_IT+0x90>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e008      	b.n	8003f6e <HAL_TIM_PWM_Start_IT+0xa2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0dd      	b.n	8004132 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start_IT+0xba>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f84:	e023      	b.n	8003fce <HAL_TIM_PWM_Start_IT+0x102>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start_IT+0xca>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f94:	e01b      	b.n	8003fce <HAL_TIM_PWM_Start_IT+0x102>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start_IT+0xda>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa4:	e013      	b.n	8003fce <HAL_TIM_PWM_Start_IT+0x102>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_PWM_Start_IT+0xea>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb4:	e00b      	b.n	8003fce <HAL_TIM_PWM_Start_IT+0x102>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_PWM_Start_IT+0xfa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	e003      	b.n	8003fce <HAL_TIM_PWM_Start_IT+0x102>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d841      	bhi.n	8004058 <HAL_TIM_PWM_Start_IT+0x18c>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <HAL_TIM_PWM_Start_IT+0x110>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004059 	.word	0x08004059
 8003fe4:	08004059 	.word	0x08004059
 8003fe8:	08004059 	.word	0x08004059
 8003fec:	08004023 	.word	0x08004023
 8003ff0:	08004059 	.word	0x08004059
 8003ff4:	08004059 	.word	0x08004059
 8003ff8:	08004059 	.word	0x08004059
 8003ffc:	08004035 	.word	0x08004035
 8004000:	08004059 	.word	0x08004059
 8004004:	08004059 	.word	0x08004059
 8004008:	08004059 	.word	0x08004059
 800400c:	08004047 	.word	0x08004047
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0202 	orr.w	r2, r2, #2
 800401e:	60da      	str	r2, [r3, #12]
      break;
 8004020:	e01d      	b.n	800405e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0204 	orr.w	r2, r2, #4
 8004030:	60da      	str	r2, [r3, #12]
      break;
 8004032:	e014      	b.n	800405e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	60da      	str	r2, [r3, #12]
      break;
 8004044:	e00b      	b.n	800405e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0210 	orr.w	r2, r2, #16
 8004054:	60da      	str	r2, [r3, #12]
      break;
 8004056:	e002      	b.n	800405e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
      break;
 800405c:	bf00      	nop
  }

  if (status == HAL_OK)
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d165      	bne.n	8004130 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2201      	movs	r2, #1
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fff7 	bl	8005060 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a31      	ldr	r2, [pc, #196]	; (800413c <HAL_TIM_PWM_Start_IT+0x270>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_TIM_PWM_Start_IT+0x1ba>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <HAL_TIM_PWM_Start_IT+0x274>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_TIM_PWM_Start_IT+0x1be>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_TIM_PWM_Start_IT+0x1c0>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a25      	ldr	r2, [pc, #148]	; (800413c <HAL_TIM_PWM_Start_IT+0x270>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d022      	beq.n	80040f0 <HAL_TIM_PWM_Start_IT+0x224>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b2:	d01d      	beq.n	80040f0 <HAL_TIM_PWM_Start_IT+0x224>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <HAL_TIM_PWM_Start_IT+0x278>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d018      	beq.n	80040f0 <HAL_TIM_PWM_Start_IT+0x224>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a21      	ldr	r2, [pc, #132]	; (8004148 <HAL_TIM_PWM_Start_IT+0x27c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <HAL_TIM_PWM_Start_IT+0x224>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <HAL_TIM_PWM_Start_IT+0x280>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_TIM_PWM_Start_IT+0x224>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <HAL_TIM_PWM_Start_IT+0x274>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_TIM_PWM_Start_IT+0x224>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_TIM_PWM_Start_IT+0x284>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_TIM_PWM_Start_IT+0x224>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <HAL_TIM_PWM_Start_IT+0x288>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d115      	bne.n	800411c <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	4b18      	ldr	r3, [pc, #96]	; (8004158 <HAL_TIM_PWM_Start_IT+0x28c>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d015      	beq.n	800412e <HAL_TIM_PWM_Start_IT+0x262>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d011      	beq.n	800412e <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	e008      	b.n	800412e <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e000      	b.n	8004130 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40010400 	.word	0x40010400
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40001800 	.word	0x40001800
 8004158:	00010007 	.word	0x00010007

0800415c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d841      	bhi.n	80041f4 <HAL_TIM_PWM_Stop_IT+0x98>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041f5 	.word	0x080041f5
 8004180:	080041f5 	.word	0x080041f5
 8004184:	080041f5 	.word	0x080041f5
 8004188:	080041bf 	.word	0x080041bf
 800418c:	080041f5 	.word	0x080041f5
 8004190:	080041f5 	.word	0x080041f5
 8004194:	080041f5 	.word	0x080041f5
 8004198:	080041d1 	.word	0x080041d1
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	080041f5 	.word	0x080041f5
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	080041e3 	.word	0x080041e3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0202 	bic.w	r2, r2, #2
 80041ba:	60da      	str	r2, [r3, #12]
      break;
 80041bc:	e01d      	b.n	80041fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0204 	bic.w	r2, r2, #4
 80041cc:	60da      	str	r2, [r3, #12]
      break;
 80041ce:	e014      	b.n	80041fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0208 	bic.w	r2, r2, #8
 80041de:	60da      	str	r2, [r3, #12]
      break;
 80041e0:	e00b      	b.n	80041fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0210 	bic.w	r2, r2, #16
 80041f0:	60da      	str	r2, [r3, #12]
      break;
 80041f2:	e002      	b.n	80041fa <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d171      	bne.n	80042e4 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 ff29 	bl	8005060 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <HAL_TIM_PWM_Stop_IT+0x194>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_TIM_PWM_Stop_IT+0xc6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a35      	ldr	r2, [pc, #212]	; (80042f4 <HAL_TIM_PWM_Stop_IT+0x198>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_TIM_PWM_Stop_IT+0xca>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_TIM_PWM_Stop_IT+0xcc>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d017      	beq.n	800425c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	f241 1311 	movw	r3, #4369	; 0x1111
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <HAL_TIM_PWM_Stop_IT+0x100>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	f240 4344 	movw	r3, #1092	; 0x444
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_TIM_PWM_Stop_IT+0x100>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	f241 1311 	movw	r3, #4369	; 0x1111
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10f      	bne.n	800428c <HAL_TIM_PWM_Stop_IT+0x130>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	f240 4344 	movw	r3, #1092	; 0x444
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d107      	bne.n	800428c <HAL_TIM_PWM_Stop_IT+0x130>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_TIM_PWM_Stop_IT+0x140>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429a:	e023      	b.n	80042e4 <HAL_TIM_PWM_Stop_IT+0x188>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d104      	bne.n	80042ac <HAL_TIM_PWM_Stop_IT+0x150>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042aa:	e01b      	b.n	80042e4 <HAL_TIM_PWM_Stop_IT+0x188>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d104      	bne.n	80042bc <HAL_TIM_PWM_Stop_IT+0x160>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ba:	e013      	b.n	80042e4 <HAL_TIM_PWM_Stop_IT+0x188>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d104      	bne.n	80042cc <HAL_TIM_PWM_Stop_IT+0x170>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ca:	e00b      	b.n	80042e4 <HAL_TIM_PWM_Stop_IT+0x188>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d104      	bne.n	80042dc <HAL_TIM_PWM_Stop_IT+0x180>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042da:	e003      	b.n	80042e4 <HAL_TIM_PWM_Stop_IT+0x188>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40010400 	.word	0x40010400

080042f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d122      	bne.n	8004354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b02      	cmp	r3, #2
 800431a:	d11b      	bne.n	8004354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0202 	mvn.w	r2, #2
 8004324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fae4 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fad6 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f003 f9d5 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b04      	cmp	r3, #4
 8004360:	d122      	bne.n	80043a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b04      	cmp	r3, #4
 800436e:	d11b      	bne.n	80043a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0204 	mvn.w	r2, #4
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 faba 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 faac 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f003 f9ab 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d122      	bne.n	80043fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d11b      	bne.n	80043fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0208 	mvn.w	r2, #8
 80043cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2204      	movs	r2, #4
 80043d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fa90 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa82 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f003 f981 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b10      	cmp	r3, #16
 8004408:	d122      	bne.n	8004450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b10      	cmp	r3, #16
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0210 	mvn.w	r2, #16
 8004420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2208      	movs	r2, #8
 8004426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa66 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa58 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f003 f957 	bl	80076f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10e      	bne.n	800447c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d107      	bne.n	800447c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0201 	mvn.w	r2, #1
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fc ff1a 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b80      	cmp	r3, #128	; 0x80
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fe9a 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b6:	d10e      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	2b80      	cmp	r3, #128	; 0x80
 80044c4:	d107      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fe8d 	bl	80051f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d10e      	bne.n	8004502 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d107      	bne.n	8004502 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa0d 	bl	800491c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b20      	cmp	r3, #32
 800450e:	d10e      	bne.n	800452e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d107      	bne.n	800452e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f06f 0220 	mvn.w	r2, #32
 8004526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fe4d 	bl	80051c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004552:	2302      	movs	r3, #2
 8004554:	e0ff      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b14      	cmp	r3, #20
 8004562:	f200 80f0 	bhi.w	8004746 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	080045c1 	.word	0x080045c1
 8004570:	08004747 	.word	0x08004747
 8004574:	08004747 	.word	0x08004747
 8004578:	08004747 	.word	0x08004747
 800457c:	08004601 	.word	0x08004601
 8004580:	08004747 	.word	0x08004747
 8004584:	08004747 	.word	0x08004747
 8004588:	08004747 	.word	0x08004747
 800458c:	08004643 	.word	0x08004643
 8004590:	08004747 	.word	0x08004747
 8004594:	08004747 	.word	0x08004747
 8004598:	08004747 	.word	0x08004747
 800459c:	08004683 	.word	0x08004683
 80045a0:	08004747 	.word	0x08004747
 80045a4:	08004747 	.word	0x08004747
 80045a8:	08004747 	.word	0x08004747
 80045ac:	080046c5 	.word	0x080046c5
 80045b0:	08004747 	.word	0x08004747
 80045b4:	08004747 	.word	0x08004747
 80045b8:	08004747 	.word	0x08004747
 80045bc:	08004705 	.word	0x08004705
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fa52 	bl	8004a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0208 	orr.w	r2, r2, #8
 80045da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0204 	bic.w	r2, r2, #4
 80045ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	619a      	str	r2, [r3, #24]
      break;
 80045fe:	e0a5      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 faa4 	bl	8004b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6999      	ldr	r1, [r3, #24]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]
      break;
 8004640:	e084      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fafb 	bl	8004c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0208 	orr.w	r2, r2, #8
 800465c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0204 	bic.w	r2, r2, #4
 800466c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69d9      	ldr	r1, [r3, #28]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	61da      	str	r2, [r3, #28]
      break;
 8004680:	e064      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fb51 	bl	8004d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800469c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69d9      	ldr	r1, [r3, #28]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	021a      	lsls	r2, r3, #8
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	61da      	str	r2, [r3, #28]
      break;
 80046c2:	e043      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fb88 	bl	8004de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0204 	bic.w	r2, r2, #4
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004702:	e023      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fbba 	bl	8004e84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004744:	e002      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
      break;
 800474a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004754:	7dfb      	ldrb	r3, [r7, #23]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop

08004760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIM_ConfigClockSource+0x1c>
 8004778:	2302      	movs	r3, #2
 800477a:	e0b4      	b.n	80048e6 <HAL_TIM_ConfigClockSource+0x186>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	4b56      	ldr	r3, [pc, #344]	; (80048f0 <HAL_TIM_ConfigClockSource+0x190>)
 8004798:	4013      	ands	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b4:	d03e      	beq.n	8004834 <HAL_TIM_ConfigClockSource+0xd4>
 80047b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ba:	f200 8087 	bhi.w	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c2:	f000 8086 	beq.w	80048d2 <HAL_TIM_ConfigClockSource+0x172>
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	d87f      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b70      	cmp	r3, #112	; 0x70
 80047ce:	d01a      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0xa6>
 80047d0:	2b70      	cmp	r3, #112	; 0x70
 80047d2:	d87b      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b60      	cmp	r3, #96	; 0x60
 80047d6:	d050      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x11a>
 80047d8:	2b60      	cmp	r3, #96	; 0x60
 80047da:	d877      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b50      	cmp	r3, #80	; 0x50
 80047de:	d03c      	beq.n	800485a <HAL_TIM_ConfigClockSource+0xfa>
 80047e0:	2b50      	cmp	r3, #80	; 0x50
 80047e2:	d873      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b40      	cmp	r3, #64	; 0x40
 80047e6:	d058      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x13a>
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d86f      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b30      	cmp	r3, #48	; 0x30
 80047ee:	d064      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15a>
 80047f0:	2b30      	cmp	r3, #48	; 0x30
 80047f2:	d86b      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d060      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15a>
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d867      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d05c      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15a>
 8004800:	2b10      	cmp	r3, #16
 8004802:	d05a      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	e062      	b.n	80048cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6899      	ldr	r1, [r3, #8]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f000 fc03 	bl	8005020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	609a      	str	r2, [r3, #8]
      break;
 8004832:	e04f      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6899      	ldr	r1, [r3, #8]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f000 fbec 	bl	8005020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004856:	609a      	str	r2, [r3, #8]
      break;
 8004858:	e03c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	f000 fb60 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2150      	movs	r1, #80	; 0x50
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fbb9 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004878:	e02c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	461a      	mov	r2, r3
 8004888:	f000 fb7f 	bl	8004f8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2160      	movs	r1, #96	; 0x60
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fba9 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004898:	e01c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f000 fb40 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2140      	movs	r1, #64	; 0x40
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb99 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 80048b8:	e00c      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f000 fb90 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 80048ca:	e003      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
      break;
 80048d0:	e000      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	fffeff88 	.word	0xfffeff88

080048f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3b      	ldr	r2, [pc, #236]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3a      	ldr	r2, [pc, #232]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d108      	bne.n	8004982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d027      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d023      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a28      	ldr	r2, [pc, #160]	; (8004a58 <TIM_Base_SetConfig+0x128>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <TIM_Base_SetConfig+0x12c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <TIM_Base_SetConfig+0x130>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <TIM_Base_SetConfig+0x134>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <TIM_Base_SetConfig+0x138>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <TIM_Base_SetConfig+0x13c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0xf8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40010400 	.word	0x40010400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	40001800 	.word	0x40001800
 8004a68:	40001c00 	.word	0x40001c00
 8004a6c:	40002000 	.word	0x40002000

08004a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f023 0201 	bic.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <TIM_OC1_SetConfig+0xd8>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 0302 	bic.w	r3, r3, #2
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <TIM_OC1_SetConfig+0xdc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_OC1_SetConfig+0x64>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <TIM_OC1_SetConfig+0xe0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10c      	bne.n	8004aee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0308 	bic.w	r3, r3, #8
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f023 0304 	bic.w	r3, r3, #4
 8004aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <TIM_OC1_SetConfig+0xdc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_OC1_SetConfig+0x8e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <TIM_OC1_SetConfig+0xe0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	fffeff8f 	.word	0xfffeff8f
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010400 	.word	0x40010400

08004b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4b2e      	ldr	r3, [pc, #184]	; (8004c38 <TIM_OC2_SetConfig+0xe4>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0320 	bic.w	r3, r3, #32
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC2_SetConfig+0x68>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <TIM_OC2_SetConfig+0xec>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10d      	bne.n	8004bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC2_SetConfig+0x94>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <TIM_OC2_SetConfig+0xec>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d113      	bne.n	8004c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	feff8fff 	.word	0xfeff8fff
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40010400 	.word	0x40010400

08004c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <TIM_OC3_SetConfig+0xe0>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <TIM_OC3_SetConfig+0xe4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_OC3_SetConfig+0x66>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <TIM_OC3_SetConfig+0xe8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10d      	bne.n	8004cc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <TIM_OC3_SetConfig+0xe4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_OC3_SetConfig+0x92>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a16      	ldr	r2, [pc, #88]	; (8004d2c <TIM_OC3_SetConfig+0xe8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d113      	bne.n	8004cfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	621a      	str	r2, [r3, #32]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	fffeff8f 	.word	0xfffeff8f
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40010400 	.word	0x40010400

08004d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <TIM_OC4_SetConfig+0xa4>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	031b      	lsls	r3, r3, #12
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <TIM_OC4_SetConfig+0xa8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_OC4_SetConfig+0x68>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <TIM_OC4_SetConfig+0xac>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d109      	bne.n	8004dac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	feff8fff 	.word	0xfeff8fff
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40010400 	.word	0x40010400

08004de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <TIM_OC5_SetConfig+0x98>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	041b      	lsls	r3, r3, #16
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <TIM_OC5_SetConfig+0x9c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d003      	beq.n	8004e3e <TIM_OC5_SetConfig+0x5e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a11      	ldr	r2, [pc, #68]	; (8004e80 <TIM_OC5_SetConfig+0xa0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d109      	bne.n	8004e52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	fffeff8f 	.word	0xfffeff8f
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40010400 	.word	0x40010400

08004e84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <TIM_OC6_SetConfig+0x9c>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	051b      	lsls	r3, r3, #20
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <TIM_OC6_SetConfig+0xa0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC6_SetConfig+0x60>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a12      	ldr	r2, [pc, #72]	; (8004f28 <TIM_OC6_SetConfig+0xa4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d109      	bne.n	8004ef8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	029b      	lsls	r3, r3, #10
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	feff8fff 	.word	0xfeff8fff
 8004f24:	40010000 	.word	0x40010000
 8004f28:	40010400 	.word	0x40010400

08004f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 030a 	bic.w	r3, r3, #10
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0210 	bic.w	r2, r3, #16
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	031b      	lsls	r3, r3, #12
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	f043 0307 	orr.w	r3, r3, #7
 800500c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	431a      	orrs	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4313      	orrs	r3, r2
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2201      	movs	r2, #1
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	43db      	mvns	r3, r3
 8005082:	401a      	ands	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1a      	ldr	r2, [r3, #32]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e06d      	b.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a30      	ldr	r2, [pc, #192]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d022      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005136:	d01d      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d018      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00e      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10c      	bne.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800517a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40010400 	.word	0x40010400
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40001800 	.word	0x40001800

080051c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e040      	b.n	8005298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc f95c 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f82c 	bl	80052a0 <UART_SetConfig>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa84 	bl	8005768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb0b 	bl	80058ac <UART_CheckIdleState>
 8005296:	4603      	mov	r3, r0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4ba6      	ldr	r3, [pc, #664]	; (8005564 <UART_SetConfig+0x2c4>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6979      	ldr	r1, [r7, #20]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a94      	ldr	r2, [pc, #592]	; (8005568 <UART_SetConfig+0x2c8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d120      	bne.n	800535e <UART_SetConfig+0xbe>
 800531c:	4b93      	ldr	r3, [pc, #588]	; (800556c <UART_SetConfig+0x2cc>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b03      	cmp	r3, #3
 8005328:	d816      	bhi.n	8005358 <UART_SetConfig+0xb8>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x90>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005341 	.word	0x08005341
 8005334:	0800534d 	.word	0x0800534d
 8005338:	08005347 	.word	0x08005347
 800533c:	08005353 	.word	0x08005353
 8005340:	2301      	movs	r3, #1
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e150      	b.n	80055e8 <UART_SetConfig+0x348>
 8005346:	2302      	movs	r3, #2
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e14d      	b.n	80055e8 <UART_SetConfig+0x348>
 800534c:	2304      	movs	r3, #4
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e14a      	b.n	80055e8 <UART_SetConfig+0x348>
 8005352:	2308      	movs	r3, #8
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e147      	b.n	80055e8 <UART_SetConfig+0x348>
 8005358:	2310      	movs	r3, #16
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e144      	b.n	80055e8 <UART_SetConfig+0x348>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a83      	ldr	r2, [pc, #524]	; (8005570 <UART_SetConfig+0x2d0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d132      	bne.n	80053ce <UART_SetConfig+0x12e>
 8005368:	4b80      	ldr	r3, [pc, #512]	; (800556c <UART_SetConfig+0x2cc>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d828      	bhi.n	80053c8 <UART_SetConfig+0x128>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <UART_SetConfig+0xdc>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053bd 	.word	0x080053bd
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080053c9 	.word	0x080053c9
 800539c:	080053b7 	.word	0x080053b7
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053c9 	.word	0x080053c9
 80053ac:	080053c3 	.word	0x080053c3
 80053b0:	2300      	movs	r3, #0
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e118      	b.n	80055e8 <UART_SetConfig+0x348>
 80053b6:	2302      	movs	r3, #2
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e115      	b.n	80055e8 <UART_SetConfig+0x348>
 80053bc:	2304      	movs	r3, #4
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e112      	b.n	80055e8 <UART_SetConfig+0x348>
 80053c2:	2308      	movs	r3, #8
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e10f      	b.n	80055e8 <UART_SetConfig+0x348>
 80053c8:	2310      	movs	r3, #16
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e10c      	b.n	80055e8 <UART_SetConfig+0x348>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a68      	ldr	r2, [pc, #416]	; (8005574 <UART_SetConfig+0x2d4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d120      	bne.n	800541a <UART_SetConfig+0x17a>
 80053d8:	4b64      	ldr	r3, [pc, #400]	; (800556c <UART_SetConfig+0x2cc>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053e2:	2b30      	cmp	r3, #48	; 0x30
 80053e4:	d013      	beq.n	800540e <UART_SetConfig+0x16e>
 80053e6:	2b30      	cmp	r3, #48	; 0x30
 80053e8:	d814      	bhi.n	8005414 <UART_SetConfig+0x174>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d009      	beq.n	8005402 <UART_SetConfig+0x162>
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d810      	bhi.n	8005414 <UART_SetConfig+0x174>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <UART_SetConfig+0x15c>
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d006      	beq.n	8005408 <UART_SetConfig+0x168>
 80053fa:	e00b      	b.n	8005414 <UART_SetConfig+0x174>
 80053fc:	2300      	movs	r3, #0
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e0f2      	b.n	80055e8 <UART_SetConfig+0x348>
 8005402:	2302      	movs	r3, #2
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e0ef      	b.n	80055e8 <UART_SetConfig+0x348>
 8005408:	2304      	movs	r3, #4
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e0ec      	b.n	80055e8 <UART_SetConfig+0x348>
 800540e:	2308      	movs	r3, #8
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e0e9      	b.n	80055e8 <UART_SetConfig+0x348>
 8005414:	2310      	movs	r3, #16
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e0e6      	b.n	80055e8 <UART_SetConfig+0x348>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a56      	ldr	r2, [pc, #344]	; (8005578 <UART_SetConfig+0x2d8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d120      	bne.n	8005466 <UART_SetConfig+0x1c6>
 8005424:	4b51      	ldr	r3, [pc, #324]	; (800556c <UART_SetConfig+0x2cc>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800542e:	2bc0      	cmp	r3, #192	; 0xc0
 8005430:	d013      	beq.n	800545a <UART_SetConfig+0x1ba>
 8005432:	2bc0      	cmp	r3, #192	; 0xc0
 8005434:	d814      	bhi.n	8005460 <UART_SetConfig+0x1c0>
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d009      	beq.n	800544e <UART_SetConfig+0x1ae>
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d810      	bhi.n	8005460 <UART_SetConfig+0x1c0>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <UART_SetConfig+0x1a8>
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d006      	beq.n	8005454 <UART_SetConfig+0x1b4>
 8005446:	e00b      	b.n	8005460 <UART_SetConfig+0x1c0>
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e0cc      	b.n	80055e8 <UART_SetConfig+0x348>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e0c9      	b.n	80055e8 <UART_SetConfig+0x348>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e0c6      	b.n	80055e8 <UART_SetConfig+0x348>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e0c3      	b.n	80055e8 <UART_SetConfig+0x348>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e0c0      	b.n	80055e8 <UART_SetConfig+0x348>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a44      	ldr	r2, [pc, #272]	; (800557c <UART_SetConfig+0x2dc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d125      	bne.n	80054bc <UART_SetConfig+0x21c>
 8005470:	4b3e      	ldr	r3, [pc, #248]	; (800556c <UART_SetConfig+0x2cc>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547e:	d017      	beq.n	80054b0 <UART_SetConfig+0x210>
 8005480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005484:	d817      	bhi.n	80054b6 <UART_SetConfig+0x216>
 8005486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548a:	d00b      	beq.n	80054a4 <UART_SetConfig+0x204>
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d811      	bhi.n	80054b6 <UART_SetConfig+0x216>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <UART_SetConfig+0x1fe>
 8005496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549a:	d006      	beq.n	80054aa <UART_SetConfig+0x20a>
 800549c:	e00b      	b.n	80054b6 <UART_SetConfig+0x216>
 800549e:	2300      	movs	r3, #0
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e0a1      	b.n	80055e8 <UART_SetConfig+0x348>
 80054a4:	2302      	movs	r3, #2
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e09e      	b.n	80055e8 <UART_SetConfig+0x348>
 80054aa:	2304      	movs	r3, #4
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e09b      	b.n	80055e8 <UART_SetConfig+0x348>
 80054b0:	2308      	movs	r3, #8
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e098      	b.n	80055e8 <UART_SetConfig+0x348>
 80054b6:	2310      	movs	r3, #16
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e095      	b.n	80055e8 <UART_SetConfig+0x348>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <UART_SetConfig+0x2e0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d125      	bne.n	8005512 <UART_SetConfig+0x272>
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <UART_SetConfig+0x2cc>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d4:	d017      	beq.n	8005506 <UART_SetConfig+0x266>
 80054d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054da:	d817      	bhi.n	800550c <UART_SetConfig+0x26c>
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e0:	d00b      	beq.n	80054fa <UART_SetConfig+0x25a>
 80054e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e6:	d811      	bhi.n	800550c <UART_SetConfig+0x26c>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <UART_SetConfig+0x254>
 80054ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f0:	d006      	beq.n	8005500 <UART_SetConfig+0x260>
 80054f2:	e00b      	b.n	800550c <UART_SetConfig+0x26c>
 80054f4:	2301      	movs	r3, #1
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e076      	b.n	80055e8 <UART_SetConfig+0x348>
 80054fa:	2302      	movs	r3, #2
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e073      	b.n	80055e8 <UART_SetConfig+0x348>
 8005500:	2304      	movs	r3, #4
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e070      	b.n	80055e8 <UART_SetConfig+0x348>
 8005506:	2308      	movs	r3, #8
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e06d      	b.n	80055e8 <UART_SetConfig+0x348>
 800550c:	2310      	movs	r3, #16
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e06a      	b.n	80055e8 <UART_SetConfig+0x348>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <UART_SetConfig+0x2e4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d138      	bne.n	800558e <UART_SetConfig+0x2ee>
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <UART_SetConfig+0x2cc>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800552a:	d017      	beq.n	800555c <UART_SetConfig+0x2bc>
 800552c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005530:	d82a      	bhi.n	8005588 <UART_SetConfig+0x2e8>
 8005532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005536:	d00b      	beq.n	8005550 <UART_SetConfig+0x2b0>
 8005538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553c:	d824      	bhi.n	8005588 <UART_SetConfig+0x2e8>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <UART_SetConfig+0x2aa>
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005546:	d006      	beq.n	8005556 <UART_SetConfig+0x2b6>
 8005548:	e01e      	b.n	8005588 <UART_SetConfig+0x2e8>
 800554a:	2300      	movs	r3, #0
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e04b      	b.n	80055e8 <UART_SetConfig+0x348>
 8005550:	2302      	movs	r3, #2
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e048      	b.n	80055e8 <UART_SetConfig+0x348>
 8005556:	2304      	movs	r3, #4
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e045      	b.n	80055e8 <UART_SetConfig+0x348>
 800555c:	2308      	movs	r3, #8
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e042      	b.n	80055e8 <UART_SetConfig+0x348>
 8005562:	bf00      	nop
 8005564:	efff69f3 	.word	0xefff69f3
 8005568:	40011000 	.word	0x40011000
 800556c:	40023800 	.word	0x40023800
 8005570:	40004400 	.word	0x40004400
 8005574:	40004800 	.word	0x40004800
 8005578:	40004c00 	.word	0x40004c00
 800557c:	40005000 	.word	0x40005000
 8005580:	40011400 	.word	0x40011400
 8005584:	40007800 	.word	0x40007800
 8005588:	2310      	movs	r3, #16
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e02c      	b.n	80055e8 <UART_SetConfig+0x348>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a72      	ldr	r2, [pc, #456]	; (800575c <UART_SetConfig+0x4bc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d125      	bne.n	80055e4 <UART_SetConfig+0x344>
 8005598:	4b71      	ldr	r3, [pc, #452]	; (8005760 <UART_SetConfig+0x4c0>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055a6:	d017      	beq.n	80055d8 <UART_SetConfig+0x338>
 80055a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055ac:	d817      	bhi.n	80055de <UART_SetConfig+0x33e>
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b2:	d00b      	beq.n	80055cc <UART_SetConfig+0x32c>
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b8:	d811      	bhi.n	80055de <UART_SetConfig+0x33e>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <UART_SetConfig+0x326>
 80055be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c2:	d006      	beq.n	80055d2 <UART_SetConfig+0x332>
 80055c4:	e00b      	b.n	80055de <UART_SetConfig+0x33e>
 80055c6:	2300      	movs	r3, #0
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e00d      	b.n	80055e8 <UART_SetConfig+0x348>
 80055cc:	2302      	movs	r3, #2
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e00a      	b.n	80055e8 <UART_SetConfig+0x348>
 80055d2:	2304      	movs	r3, #4
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e007      	b.n	80055e8 <UART_SetConfig+0x348>
 80055d8:	2308      	movs	r3, #8
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e004      	b.n	80055e8 <UART_SetConfig+0x348>
 80055de:	2310      	movs	r3, #16
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e001      	b.n	80055e8 <UART_SetConfig+0x348>
 80055e4:	2310      	movs	r3, #16
 80055e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f0:	d15b      	bne.n	80056aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d828      	bhi.n	800564a <UART_SetConfig+0x3aa>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x360>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005635 	.word	0x08005635
 800560c:	0800564b 	.word	0x0800564b
 8005610:	0800563b 	.word	0x0800563b
 8005614:	0800564b 	.word	0x0800564b
 8005618:	0800564b 	.word	0x0800564b
 800561c:	0800564b 	.word	0x0800564b
 8005620:	08005643 	.word	0x08005643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7fd fed6 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005628:	61b8      	str	r0, [r7, #24]
        break;
 800562a:	e013      	b.n	8005654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800562c:	f7fd fee6 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8005630:	61b8      	str	r0, [r7, #24]
        break;
 8005632:	e00f      	b.n	8005654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005634:	4b4b      	ldr	r3, [pc, #300]	; (8005764 <UART_SetConfig+0x4c4>)
 8005636:	61bb      	str	r3, [r7, #24]
        break;
 8005638:	e00c      	b.n	8005654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563a:	f7fd fdb9 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800563e:	61b8      	str	r0, [r7, #24]
        break;
 8005640:	e008      	b.n	8005654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005646:	61bb      	str	r3, [r7, #24]
        break;
 8005648:	e004      	b.n	8005654 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	77bb      	strb	r3, [r7, #30]
        break;
 8005652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d074      	beq.n	8005744 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	005a      	lsls	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b0f      	cmp	r3, #15
 8005674:	d916      	bls.n	80056a4 <UART_SetConfig+0x404>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	d212      	bcs.n	80056a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f023 030f 	bic.w	r3, r3, #15
 8005686:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	b29b      	uxth	r3, r3
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	b29a      	uxth	r2, r3
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	4313      	orrs	r3, r2
 8005698:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	89fa      	ldrh	r2, [r7, #14]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	e04f      	b.n	8005744 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	77bb      	strb	r3, [r7, #30]
 80056a8:	e04c      	b.n	8005744 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056aa:	7ffb      	ldrb	r3, [r7, #31]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d828      	bhi.n	8005702 <UART_SetConfig+0x462>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x418>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056ed 	.word	0x080056ed
 80056c4:	08005703 	.word	0x08005703
 80056c8:	080056f3 	.word	0x080056f3
 80056cc:	08005703 	.word	0x08005703
 80056d0:	08005703 	.word	0x08005703
 80056d4:	08005703 	.word	0x08005703
 80056d8:	080056fb 	.word	0x080056fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056dc:	f7fd fe7a 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 80056e0:	61b8      	str	r0, [r7, #24]
        break;
 80056e2:	e013      	b.n	800570c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056e4:	f7fd fe8a 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80056e8:	61b8      	str	r0, [r7, #24]
        break;
 80056ea:	e00f      	b.n	800570c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ec:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <UART_SetConfig+0x4c4>)
 80056ee:	61bb      	str	r3, [r7, #24]
        break;
 80056f0:	e00c      	b.n	800570c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f2:	f7fd fd5d 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 80056f6:	61b8      	str	r0, [r7, #24]
        break;
 80056f8:	e008      	b.n	800570c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	61bb      	str	r3, [r7, #24]
        break;
 8005700:	e004      	b.n	800570c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	77bb      	strb	r3, [r7, #30]
        break;
 800570a:	bf00      	nop
    }

    if (pclk != 0U)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d018      	beq.n	8005744 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	085a      	lsrs	r2, r3, #1
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	441a      	add	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b0f      	cmp	r3, #15
 800572a:	d909      	bls.n	8005740 <UART_SetConfig+0x4a0>
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005732:	d205      	bcs.n	8005740 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	e001      	b.n	8005744 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005750:	7fbb      	ldrb	r3, [r7, #30]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40007c00 	.word	0x40007c00
 8005760:	40023800 	.word	0x40023800
 8005764:	00f42400 	.word	0x00f42400

08005768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01a      	beq.n	800587e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005866:	d10a      	bne.n	800587e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058bc:	f7fb fff8 	bl	80018b0 <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d10e      	bne.n	80058ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f81b 	bl	800591a <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e011      	b.n	8005912 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b09c      	sub	sp, #112	; 0x70
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	4613      	mov	r3, r2
 8005928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592a:	e0a7      	b.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800592c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005932:	f000 80a3 	beq.w	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005936:	f7fb ffbb 	bl	80018b0 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005942:	429a      	cmp	r2, r3
 8005944:	d302      	bcc.n	800594c <UART_WaitOnFlagUntilTimeout+0x32>
 8005946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005948:	2b00      	cmp	r3, #0
 800594a:	d13f      	bne.n	80059cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005960:	667b      	str	r3, [r7, #100]	; 0x64
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800596c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e6      	bne.n	800594c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	663b      	str	r3, [r7, #96]	; 0x60
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800599e:	64ba      	str	r2, [r7, #72]	; 0x48
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e068      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d050      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e8:	d148      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
 8005a14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	613b      	str	r3, [r7, #16]
   return(result);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a46:	623a      	str	r2, [r7, #32]
 8005a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	69f9      	ldr	r1, [r7, #28]
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e010      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4013      	ands	r3, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	f43f af48 	beq.w	800592c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3770      	adds	r7, #112	; 0x70
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	f107 001c 	add.w	r0, r7, #28
 8005ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d120      	bne.n	8005b02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <USB_CoreInit+0xac>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa96 	bl	8006028 <USB_CoreReset>
 8005afc:	4603      	mov	r3, r0
 8005afe:	73fb      	strb	r3, [r7, #15]
 8005b00:	e010      	b.n	8005b24 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa8a 	bl	8006028 <USB_CoreReset>
 8005b14:	4603      	mov	r3, r0
 8005b16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d10b      	bne.n	8005b42 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f043 0206 	orr.w	r2, r3, #6
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b4e:	b004      	add	sp, #16
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	ffbdffbf 	.word	0xffbdffbf

08005b58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 0201 	bic.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d115      	bne.n	8005bc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f7fb fe8d 	bl	80018c8 <HAL_Delay>
      ms++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fa29 	bl	800600c <USB_GetMode>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d01e      	beq.n	8005bfe <USB_SetCurrentMode+0x84>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b31      	cmp	r3, #49	; 0x31
 8005bc4:	d9f0      	bls.n	8005ba8 <USB_SetCurrentMode+0x2e>
 8005bc6:	e01a      	b.n	8005bfe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d115      	bne.n	8005bfa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f7fb fe74 	bl	80018c8 <HAL_Delay>
      ms++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa10 	bl	800600c <USB_GetMode>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <USB_SetCurrentMode+0x84>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b31      	cmp	r3, #49	; 0x31
 8005bf6:	d9f0      	bls.n	8005bda <USB_SetCurrentMode+0x60>
 8005bf8:	e001      	b.n	8005bfe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e005      	b.n	8005c0a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b32      	cmp	r3, #50	; 0x32
 8005c02:	d101      	bne.n	8005c08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c14:	b084      	sub	sp, #16
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	e009      	b.n	8005c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3340      	adds	r3, #64	; 0x40
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3301      	adds	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b0e      	cmp	r3, #14
 8005c4c:	d9f2      	bls.n	8005c34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11c      	bne.n	8005c8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c62:	f043 0302 	orr.w	r3, r3, #2
 8005c66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e005      	b.n	8005c9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	4619      	mov	r1, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	680b      	ldr	r3, [r1, #0]
 8005cb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d10c      	bne.n	8005cda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f965 	bl	8005f98 <USB_SetDevSpeed>
 8005cce:	e008      	b.n	8005ce2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f960 	bl	8005f98 <USB_SetDevSpeed>
 8005cd8:	e003      	b.n	8005ce2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cda:	2103      	movs	r1, #3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f95b 	bl	8005f98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ce2:	2110      	movs	r1, #16
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f8f3 	bl	8005ed0 <USB_FlushTxFifo>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f91f 	bl	8005f38 <USB_FlushRxFifo>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d16:	461a      	mov	r2, r3
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	461a      	mov	r2, r3
 8005d24:	2300      	movs	r3, #0
 8005d26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e043      	b.n	8005db6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d44:	d118      	bne.n	8005d78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e013      	b.n	8005d8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e008      	b.n	8005d8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	461a      	mov	r2, r3
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	461a      	mov	r2, r3
 8005daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3b7      	bcc.n	8005d2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e043      	b.n	8005e4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dda:	d118      	bne.n	8005e0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	461a      	mov	r2, r3
 8005df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e013      	b.n	8005e20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	461a      	mov	r2, r3
 8005e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e008      	b.n	8005e20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d3b7      	bcc.n	8005dc4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f043 0210 	orr.w	r2, r3, #16
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <USB_DevInit+0x2b4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f043 0208 	orr.w	r2, r3, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d105      	bne.n	8005eb8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <USB_DevInit+0x2b8>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ec4:	b004      	add	sp, #16
 8005ec6:	4770      	bx	lr
 8005ec8:	803c3800 	.word	0x803c3800
 8005ecc:	40000004 	.word	0x40000004

08005ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <USB_FlushTxFifo+0x64>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e01b      	b.n	8005f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	daf2      	bge.n	8005ede <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	019b      	lsls	r3, r3, #6
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <USB_FlushTxFifo+0x64>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e006      	b.n	8005f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d0f0      	beq.n	8005f08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	00030d40 	.word	0x00030d40

08005f38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <USB_FlushRxFifo+0x5c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e018      	b.n	8005f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	daf2      	bge.n	8005f44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2210      	movs	r2, #16
 8005f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <USB_FlushRxFifo+0x5c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e006      	b.n	8005f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d0f0      	beq.n	8005f68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	00030d40 	.word	0x00030d40

08005f98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fe4:	f023 0303 	bic.w	r3, r3, #3
 8005fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0301 	and.w	r3, r3, #1
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <USB_CoreReset+0x64>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e01b      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	daf2      	bge.n	8006034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <USB_CoreReset+0x64>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d0f0      	beq.n	800605e <USB_CoreReset+0x36>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00030d40 	.word	0x00030d40

08006090 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800609e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060a2:	2b84      	cmp	r3, #132	; 0x84
 80060a4:	d005      	beq.n	80060b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80060a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	3303      	adds	r3, #3
 80060b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80060b2:	68fb      	ldr	r3, [r7, #12]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80060c4:	f000 fb00 	bl	80066c8 <vTaskStartScheduler>
  
  return osOK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	bd80      	pop	{r7, pc}

080060ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80060ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d0:	b089      	sub	sp, #36	; 0x24
 80060d2:	af04      	add	r7, sp, #16
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <osThreadCreate+0x54>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01c      	beq.n	8006122 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685c      	ldr	r4, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681d      	ldr	r5, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691e      	ldr	r6, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff ffc8 	bl	8006090 <makeFreeRtosPriority>
 8006100:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800610a:	9202      	str	r2, [sp, #8]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	9100      	str	r1, [sp, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	4632      	mov	r2, r6
 8006114:	4629      	mov	r1, r5
 8006116:	4620      	mov	r0, r4
 8006118:	f000 f8ed 	bl	80062f6 <xTaskCreateStatic>
 800611c:	4603      	mov	r3, r0
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e01c      	b.n	800615c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685c      	ldr	r4, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800612e:	b29e      	uxth	r6, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff ffaa 	bl	8006090 <makeFreeRtosPriority>
 800613c:	4602      	mov	r2, r0
 800613e:	f107 030c 	add.w	r3, r7, #12
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	9200      	str	r2, [sp, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	4632      	mov	r2, r6
 800614a:	4629      	mov	r1, r5
 800614c:	4620      	mov	r0, r4
 800614e:	f000 f935 	bl	80063bc <xTaskCreate>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d001      	beq.n	800615c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006166 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <osDelay+0x16>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	e000      	b.n	800617e <osDelay+0x18>
 800617c:	2301      	movs	r3, #1
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fa6c 	bl	800665c <vTaskDelay>
  
  return osOK;
 8006184:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f103 0208 	add.w	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f103 0208 	add.w	r2, r3, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f103 0208 	add.w	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006246:	d103      	bne.n	8006250 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e00c      	b.n	800626a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3308      	adds	r3, #8
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e002      	b.n	800625e <vListInsert+0x2e>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	d2f6      	bcs.n	8006258 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6892      	ldr	r2, [r2, #8]
 80062b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6852      	ldr	r2, [r2, #4]
 80062c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d103      	bne.n	80062d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	1e5a      	subs	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b08e      	sub	sp, #56	; 0x38
 80062fa:	af04      	add	r7, sp, #16
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10c      	bne.n	8006324 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	b672      	cpsid	i
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	b662      	cpsie	i
 800631e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10c      	bne.n	8006344 <xTaskCreateStatic+0x4e>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	b672      	cpsid	i
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	b662      	cpsie	i
 800633e:	61fb      	str	r3, [r7, #28]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006344:	23b4      	movs	r3, #180	; 0xb4
 8006346:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2bb4      	cmp	r3, #180	; 0xb4
 800634c:	d00c      	beq.n	8006368 <xTaskCreateStatic+0x72>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	b672      	cpsid	i
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	b662      	cpsie	i
 8006362:	61bb      	str	r3, [r7, #24]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006368:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <xTaskCreateStatic+0xb8>
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01b      	beq.n	80063ae <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	2202      	movs	r2, #2
 8006384:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006388:	2300      	movs	r3, #0
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	9302      	str	r3, [sp, #8]
 8006390:	f107 0314 	add.w	r3, r7, #20
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f851 	bl	8006448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063a8:	f000 f8ee 	bl	8006588 <prvAddNewTaskToReadyList>
 80063ac:	e001      	b.n	80063b2 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063b2:	697b      	ldr	r3, [r7, #20]
	}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3728      	adds	r7, #40	; 0x28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08c      	sub	sp, #48	; 0x30
 80063c0:	af04      	add	r7, sp, #16
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 feeb 	bl	80071ac <pvPortMalloc>
 80063d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063de:	20b4      	movs	r0, #180	; 0xb4
 80063e0:	f000 fee4 	bl	80071ac <pvPortMalloc>
 80063e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
 80063f2:	e005      	b.n	8006400 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063f4:	6978      	ldr	r0, [r7, #20]
 80063f6:	f000 ffa3 	bl	8007340 <vPortFree>
 80063fa:	e001      	b.n	8006400 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	2300      	movs	r3, #0
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f80f 	bl	8006448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800642a:	69f8      	ldr	r0, [r7, #28]
 800642c:	f000 f8ac 	bl	8006588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006430:	2301      	movs	r3, #1
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e002      	b.n	800643c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800643a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800643c:	69bb      	ldr	r3, [r7, #24]
	}
 800643e:	4618      	mov	r0, r3
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006460:	440b      	add	r3, r1
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f023 0307 	bic.w	r3, r3, #7
 800646e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00c      	beq.n	8006494 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	b672      	cpsid	i
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	b662      	cpsie	i
 800648e:	617b      	str	r3, [r7, #20]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01f      	beq.n	80064da <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800649a:	2300      	movs	r3, #0
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	e012      	b.n	80064c6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	7819      	ldrb	r1, [r3, #0]
 80064a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	3334      	adds	r3, #52	; 0x34
 80064b0:	460a      	mov	r2, r1
 80064b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	3301      	adds	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	2b0f      	cmp	r3, #15
 80064ca:	d9e9      	bls.n	80064a0 <prvInitialiseNewTask+0x58>
 80064cc:	e000      	b.n	80064d0 <prvInitialiseNewTask+0x88>
			{
				break;
 80064ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d8:	e003      	b.n	80064e2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	2b06      	cmp	r3, #6
 80064e6:	d901      	bls.n	80064ec <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064e8:	2306      	movs	r3, #6
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	2200      	movs	r2, #0
 80064fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	3304      	adds	r3, #4
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fe63 	bl	80061ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	3318      	adds	r3, #24
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fe5e 	bl	80061ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	f1c3 0207 	rsb	r2, r3, #7
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	2200      	movs	r2, #0
 800652c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	2200      	movs	r2, #0
 8006534:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	334c      	adds	r3, #76	; 0x4c
 800653c:	2260      	movs	r2, #96	; 0x60
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f001 ff1f 	bl	8008384 <memset>
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	4a0c      	ldr	r2, [pc, #48]	; (800657c <prvInitialiseNewTask+0x134>)
 800654a:	651a      	str	r2, [r3, #80]	; 0x50
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	4a0c      	ldr	r2, [pc, #48]	; (8006580 <prvInitialiseNewTask+0x138>)
 8006550:	655a      	str	r2, [r3, #84]	; 0x54
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	4a0b      	ldr	r2, [pc, #44]	; (8006584 <prvInitialiseNewTask+0x13c>)
 8006556:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	69b8      	ldr	r0, [r7, #24]
 800655e:	f000 fc2d 	bl	8006dbc <pxPortInitialiseStack>
 8006562:	4602      	mov	r2, r0
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006574:	bf00      	nop
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	08008994 	.word	0x08008994
 8006580:	080089b4 	.word	0x080089b4
 8006584:	08008974 	.word	0x08008974

08006588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006590:	f000 fd24 	bl	8006fdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006594:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <prvAddNewTaskToReadyList+0xb8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	4a29      	ldr	r2, [pc, #164]	; (8006640 <prvAddNewTaskToReadyList+0xb8>)
 800659c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800659e:	4b29      	ldr	r3, [pc, #164]	; (8006644 <prvAddNewTaskToReadyList+0xbc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d109      	bne.n	80065ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065a6:	4a27      	ldr	r2, [pc, #156]	; (8006644 <prvAddNewTaskToReadyList+0xbc>)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065ac:	4b24      	ldr	r3, [pc, #144]	; (8006640 <prvAddNewTaskToReadyList+0xb8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d110      	bne.n	80065d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065b4:	f000 fad8 	bl	8006b68 <prvInitialiseTaskLists>
 80065b8:	e00d      	b.n	80065d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065ba:	4b23      	ldr	r3, [pc, #140]	; (8006648 <prvAddNewTaskToReadyList+0xc0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065c2:	4b20      	ldr	r3, [pc, #128]	; (8006644 <prvAddNewTaskToReadyList+0xbc>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d802      	bhi.n	80065d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065d0:	4a1c      	ldr	r2, [pc, #112]	; (8006644 <prvAddNewTaskToReadyList+0xbc>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065d6:	4b1d      	ldr	r3, [pc, #116]	; (800664c <prvAddNewTaskToReadyList+0xc4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	4a1b      	ldr	r2, [pc, #108]	; (800664c <prvAddNewTaskToReadyList+0xc4>)
 80065de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	2201      	movs	r2, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	4b19      	ldr	r3, [pc, #100]	; (8006650 <prvAddNewTaskToReadyList+0xc8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	4a18      	ldr	r2, [pc, #96]	; (8006650 <prvAddNewTaskToReadyList+0xc8>)
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4a15      	ldr	r2, [pc, #84]	; (8006654 <prvAddNewTaskToReadyList+0xcc>)
 8006600:	441a      	add	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7ff fded 	bl	80061e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800660e:	f000 fd19 	bl	8007044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006612:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <prvAddNewTaskToReadyList+0xc0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00e      	beq.n	8006638 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800661a:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <prvAddNewTaskToReadyList+0xbc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	429a      	cmp	r2, r3
 8006626:	d207      	bcs.n	8006638 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <prvAddNewTaskToReadyList+0xd0>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000b04 	.word	0x20000b04
 8006644:	20000a04 	.word	0x20000a04
 8006648:	20000b10 	.word	0x20000b10
 800664c:	20000b20 	.word	0x20000b20
 8006650:	20000b0c 	.word	0x20000b0c
 8006654:	20000a08 	.word	0x20000a08
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d019      	beq.n	80066a2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800666e:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <vTaskDelay+0x64>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00c      	beq.n	8006690 <vTaskDelay+0x34>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	b672      	cpsid	i
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	b662      	cpsie	i
 800668a:	60bb      	str	r3, [r7, #8]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006690:	f000 f888 	bl	80067a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006694:	2100      	movs	r1, #0
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fb2a 	bl	8006cf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800669c:	f000 f890 	bl	80067c0 <xTaskResumeAll>
 80066a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d107      	bne.n	80066b8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <vTaskDelay+0x68>)
 80066aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000b2c 	.word	0x20000b2c
 80066c4:	e000ed04 	.word	0xe000ed04

080066c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066d6:	463a      	mov	r2, r7
 80066d8:	1d39      	adds	r1, r7, #4
 80066da:	f107 0308 	add.w	r3, r7, #8
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fa fa4e 	bl	8000b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	9202      	str	r2, [sp, #8]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	460a      	mov	r2, r1
 80066f6:	4923      	ldr	r1, [pc, #140]	; (8006784 <vTaskStartScheduler+0xbc>)
 80066f8:	4823      	ldr	r0, [pc, #140]	; (8006788 <vTaskStartScheduler+0xc0>)
 80066fa:	f7ff fdfc 	bl	80062f6 <xTaskCreateStatic>
 80066fe:	4603      	mov	r3, r0
 8006700:	4a22      	ldr	r2, [pc, #136]	; (800678c <vTaskStartScheduler+0xc4>)
 8006702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006704:	4b21      	ldr	r3, [pc, #132]	; (800678c <vTaskStartScheduler+0xc4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e001      	b.n	8006716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d11d      	bne.n	8006758 <vTaskStartScheduler+0x90>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	613b      	str	r3, [r7, #16]
}
 8006732:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006734:	4b16      	ldr	r3, [pc, #88]	; (8006790 <vTaskStartScheduler+0xc8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	334c      	adds	r3, #76	; 0x4c
 800673a:	4a16      	ldr	r2, [pc, #88]	; (8006794 <vTaskStartScheduler+0xcc>)
 800673c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800673e:	4b16      	ldr	r3, [pc, #88]	; (8006798 <vTaskStartScheduler+0xd0>)
 8006740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006744:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006746:	4b15      	ldr	r3, [pc, #84]	; (800679c <vTaskStartScheduler+0xd4>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800674c:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <vTaskStartScheduler+0xd8>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006752:	f000 fbc5 	bl	8006ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006756:	e010      	b.n	800677a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675e:	d10c      	bne.n	800677a <vTaskStartScheduler+0xb2>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	b672      	cpsid	i
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	b662      	cpsie	i
 8006774:	60fb      	str	r3, [r7, #12]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <vTaskStartScheduler+0xb0>
}
 800677a:	bf00      	nop
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	08008584 	.word	0x08008584
 8006788:	08006b39 	.word	0x08006b39
 800678c:	20000b28 	.word	0x20000b28
 8006790:	20000a04 	.word	0x20000a04
 8006794:	20000010 	.word	0x20000010
 8006798:	20000b24 	.word	0x20000b24
 800679c:	20000b10 	.word	0x20000b10
 80067a0:	20000b08 	.word	0x20000b08

080067a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067a8:	4b04      	ldr	r3, [pc, #16]	; (80067bc <vTaskSuspendAll+0x18>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	4a03      	ldr	r2, [pc, #12]	; (80067bc <vTaskSuspendAll+0x18>)
 80067b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20000b2c 	.word	0x20000b2c

080067c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067ce:	4b42      	ldr	r3, [pc, #264]	; (80068d8 <xTaskResumeAll+0x118>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10c      	bne.n	80067f0 <xTaskResumeAll+0x30>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	b672      	cpsid	i
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	b662      	cpsie	i
 80067ea:	603b      	str	r3, [r7, #0]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067f0:	f000 fbf4 	bl	8006fdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067f4:	4b38      	ldr	r3, [pc, #224]	; (80068d8 <xTaskResumeAll+0x118>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	4a37      	ldr	r2, [pc, #220]	; (80068d8 <xTaskResumeAll+0x118>)
 80067fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <xTaskResumeAll+0x118>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d161      	bne.n	80068ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006806:	4b35      	ldr	r3, [pc, #212]	; (80068dc <xTaskResumeAll+0x11c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d05d      	beq.n	80068ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800680e:	e02e      	b.n	800686e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006810:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <xTaskResumeAll+0x120>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3318      	adds	r3, #24
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fd40 	bl	80062a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3304      	adds	r3, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fd3b 	bl	80062a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	2201      	movs	r2, #1
 8006832:	409a      	lsls	r2, r3
 8006834:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <xTaskResumeAll+0x124>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4313      	orrs	r3, r2
 800683a:	4a2a      	ldr	r2, [pc, #168]	; (80068e4 <xTaskResumeAll+0x124>)
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4a27      	ldr	r2, [pc, #156]	; (80068e8 <xTaskResumeAll+0x128>)
 800684c:	441a      	add	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7ff fcc7 	bl	80061e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	4b23      	ldr	r3, [pc, #140]	; (80068ec <xTaskResumeAll+0x12c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <xTaskResumeAll+0x130>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800686e:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <xTaskResumeAll+0x120>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1cc      	bne.n	8006810 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800687c:	f000 fa18 	bl	8006cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006880:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <xTaskResumeAll+0x134>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800688c:	f000 f836 	bl	80068fc <xTaskIncrementTick>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006896:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <xTaskResumeAll+0x130>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3b01      	subs	r3, #1
 80068a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f1      	bne.n	800688c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <xTaskResumeAll+0x134>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <xTaskResumeAll+0x130>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <xTaskResumeAll+0x138>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068ca:	f000 fbbb 	bl	8007044 <vPortExitCritical>

	return xAlreadyYielded;
 80068ce:	68bb      	ldr	r3, [r7, #8]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000b2c 	.word	0x20000b2c
 80068dc:	20000b04 	.word	0x20000b04
 80068e0:	20000ac4 	.word	0x20000ac4
 80068e4:	20000b0c 	.word	0x20000b0c
 80068e8:	20000a08 	.word	0x20000a08
 80068ec:	20000a04 	.word	0x20000a04
 80068f0:	20000b18 	.word	0x20000b18
 80068f4:	20000b14 	.word	0x20000b14
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006906:	4b4f      	ldr	r3, [pc, #316]	; (8006a44 <xTaskIncrementTick+0x148>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 808a 	bne.w	8006a24 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006910:	4b4d      	ldr	r3, [pc, #308]	; (8006a48 <xTaskIncrementTick+0x14c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006918:	4a4b      	ldr	r2, [pc, #300]	; (8006a48 <xTaskIncrementTick+0x14c>)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d122      	bne.n	800696a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006924:	4b49      	ldr	r3, [pc, #292]	; (8006a4c <xTaskIncrementTick+0x150>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <xTaskIncrementTick+0x4c>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	b672      	cpsid	i
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	b662      	cpsie	i
 8006942:	603b      	str	r3, [r7, #0]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xTaskIncrementTick+0x4a>
 8006948:	4b40      	ldr	r3, [pc, #256]	; (8006a4c <xTaskIncrementTick+0x150>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	4b40      	ldr	r3, [pc, #256]	; (8006a50 <xTaskIncrementTick+0x154>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a3e      	ldr	r2, [pc, #248]	; (8006a4c <xTaskIncrementTick+0x150>)
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4a3e      	ldr	r2, [pc, #248]	; (8006a50 <xTaskIncrementTick+0x154>)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	4b3d      	ldr	r3, [pc, #244]	; (8006a54 <xTaskIncrementTick+0x158>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	4a3c      	ldr	r2, [pc, #240]	; (8006a54 <xTaskIncrementTick+0x158>)
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	f000 f9a3 	bl	8006cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800696a:	4b3b      	ldr	r3, [pc, #236]	; (8006a58 <xTaskIncrementTick+0x15c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	429a      	cmp	r2, r3
 8006972:	d348      	bcc.n	8006a06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006974:	4b35      	ldr	r3, [pc, #212]	; (8006a4c <xTaskIncrementTick+0x150>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697e:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <xTaskIncrementTick+0x15c>)
 8006980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006984:	601a      	str	r2, [r3, #0]
					break;
 8006986:	e03e      	b.n	8006a06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006988:	4b30      	ldr	r3, [pc, #192]	; (8006a4c <xTaskIncrementTick+0x150>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	429a      	cmp	r2, r3
 800699e:	d203      	bcs.n	80069a8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069a0:	4a2d      	ldr	r2, [pc, #180]	; (8006a58 <xTaskIncrementTick+0x15c>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069a6:	e02e      	b.n	8006a06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fc78 	bl	80062a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3318      	adds	r3, #24
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fc6f 	bl	80062a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	2201      	movs	r2, #1
 80069ca:	409a      	lsls	r2, r3
 80069cc:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <xTaskIncrementTick+0x160>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <xTaskIncrementTick+0x160>)
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4a1f      	ldr	r2, [pc, #124]	; (8006a60 <xTaskIncrementTick+0x164>)
 80069e4:	441a      	add	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f7ff fbfb 	bl	80061e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f6:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <xTaskIncrementTick+0x168>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d3b9      	bcc.n	8006974 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a04:	e7b6      	b.n	8006974 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a06:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <xTaskIncrementTick+0x168>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	4914      	ldr	r1, [pc, #80]	; (8006a60 <xTaskIncrementTick+0x164>)
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d907      	bls.n	8006a2e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e004      	b.n	8006a2e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a24:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <xTaskIncrementTick+0x16c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <xTaskIncrementTick+0x16c>)
 8006a2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <xTaskIncrementTick+0x170>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006a36:	2301      	movs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a3a:	697b      	ldr	r3, [r7, #20]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20000b2c 	.word	0x20000b2c
 8006a48:	20000b08 	.word	0x20000b08
 8006a4c:	20000abc 	.word	0x20000abc
 8006a50:	20000ac0 	.word	0x20000ac0
 8006a54:	20000b1c 	.word	0x20000b1c
 8006a58:	20000b24 	.word	0x20000b24
 8006a5c:	20000b0c 	.word	0x20000b0c
 8006a60:	20000a08 	.word	0x20000a08
 8006a64:	20000a04 	.word	0x20000a04
 8006a68:	20000b14 	.word	0x20000b14
 8006a6c:	20000b18 	.word	0x20000b18

08006a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a76:	4b2a      	ldr	r3, [pc, #168]	; (8006b20 <vTaskSwitchContext+0xb0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a7e:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <vTaskSwitchContext+0xb4>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a84:	e046      	b.n	8006b14 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006a86:	4b27      	ldr	r3, [pc, #156]	; (8006b24 <vTaskSwitchContext+0xb4>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8c:	4b26      	ldr	r3, [pc, #152]	; (8006b28 <vTaskSwitchContext+0xb8>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	fab3 f383 	clz	r3, r3
 8006a98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	f1c3 031f 	rsb	r3, r3, #31
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	4922      	ldr	r1, [pc, #136]	; (8006b2c <vTaskSwitchContext+0xbc>)
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10c      	bne.n	8006ad0 <vTaskSwitchContext+0x60>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	b672      	cpsid	i
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	b662      	cpsie	i
 8006aca:	607b      	str	r3, [r7, #4]
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <vTaskSwitchContext+0x5e>
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <vTaskSwitchContext+0xbc>)
 8006adc:	4413      	add	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3308      	adds	r3, #8
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d104      	bne.n	8006b00 <vTaskSwitchContext+0x90>
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	605a      	str	r2, [r3, #4]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <vTaskSwitchContext+0xc0>)
 8006b08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <vTaskSwitchContext+0xc0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	334c      	adds	r3, #76	; 0x4c
 8006b10:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <vTaskSwitchContext+0xc4>)
 8006b12:	6013      	str	r3, [r2, #0]
}
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000b2c 	.word	0x20000b2c
 8006b24:	20000b18 	.word	0x20000b18
 8006b28:	20000b0c 	.word	0x20000b0c
 8006b2c:	20000a08 	.word	0x20000a08
 8006b30:	20000a04 	.word	0x20000a04
 8006b34:	20000010 	.word	0x20000010

08006b38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b40:	f000 f852 	bl	8006be8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <prvIdleTask+0x28>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d9f9      	bls.n	8006b40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <prvIdleTask+0x2c>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b5c:	e7f0      	b.n	8006b40 <prvIdleTask+0x8>
 8006b5e:	bf00      	nop
 8006b60:	20000a08 	.word	0x20000a08
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	e00c      	b.n	8006b8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4a12      	ldr	r2, [pc, #72]	; (8006bc8 <prvInitialiseTaskLists+0x60>)
 8006b80:	4413      	add	r3, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fb03 	bl	800618e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b06      	cmp	r3, #6
 8006b92:	d9ef      	bls.n	8006b74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b94:	480d      	ldr	r0, [pc, #52]	; (8006bcc <prvInitialiseTaskLists+0x64>)
 8006b96:	f7ff fafa 	bl	800618e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b9a:	480d      	ldr	r0, [pc, #52]	; (8006bd0 <prvInitialiseTaskLists+0x68>)
 8006b9c:	f7ff faf7 	bl	800618e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ba0:	480c      	ldr	r0, [pc, #48]	; (8006bd4 <prvInitialiseTaskLists+0x6c>)
 8006ba2:	f7ff faf4 	bl	800618e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ba6:	480c      	ldr	r0, [pc, #48]	; (8006bd8 <prvInitialiseTaskLists+0x70>)
 8006ba8:	f7ff faf1 	bl	800618e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bac:	480b      	ldr	r0, [pc, #44]	; (8006bdc <prvInitialiseTaskLists+0x74>)
 8006bae:	f7ff faee 	bl	800618e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <prvInitialiseTaskLists+0x78>)
 8006bb4:	4a05      	ldr	r2, [pc, #20]	; (8006bcc <prvInitialiseTaskLists+0x64>)
 8006bb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <prvInitialiseTaskLists+0x7c>)
 8006bba:	4a05      	ldr	r2, [pc, #20]	; (8006bd0 <prvInitialiseTaskLists+0x68>)
 8006bbc:	601a      	str	r2, [r3, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000a08 	.word	0x20000a08
 8006bcc:	20000a94 	.word	0x20000a94
 8006bd0:	20000aa8 	.word	0x20000aa8
 8006bd4:	20000ac4 	.word	0x20000ac4
 8006bd8:	20000ad8 	.word	0x20000ad8
 8006bdc:	20000af0 	.word	0x20000af0
 8006be0:	20000abc 	.word	0x20000abc
 8006be4:	20000ac0 	.word	0x20000ac0

08006be8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bee:	e019      	b.n	8006c24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bf0:	f000 f9f4 	bl	8006fdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf4:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <prvCheckTasksWaitingTermination+0x50>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fb4e 	bl	80062a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <prvCheckTasksWaitingTermination+0x54>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	4a0b      	ldr	r2, [pc, #44]	; (8006c3c <prvCheckTasksWaitingTermination+0x54>)
 8006c0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <prvCheckTasksWaitingTermination+0x58>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	4a0a      	ldr	r2, [pc, #40]	; (8006c40 <prvCheckTasksWaitingTermination+0x58>)
 8006c18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c1a:	f000 fa13 	bl	8007044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f810 	bl	8006c44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <prvCheckTasksWaitingTermination+0x58>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e1      	bne.n	8006bf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000ad8 	.word	0x20000ad8
 8006c3c:	20000b04 	.word	0x20000b04
 8006c40:	20000aec 	.word	0x20000aec

08006c44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	334c      	adds	r3, #76	; 0x4c
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fbad 	bl	80083b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d108      	bne.n	8006c72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fb6b 	bl	8007340 <vPortFree>
				vPortFree( pxTCB );
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fb68 	bl	8007340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c70:	e01a      	b.n	8006ca8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d103      	bne.n	8006c84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fb5f 	bl	8007340 <vPortFree>
	}
 8006c82:	e011      	b.n	8006ca8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d00c      	beq.n	8006ca8 <prvDeleteTCB+0x64>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	b672      	cpsid	i
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	b662      	cpsie	i
 8006ca2:	60fb      	str	r3, [r7, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <prvDeleteTCB+0x62>
	}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <prvResetNextTaskUnblockTime+0x38>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <prvResetNextTaskUnblockTime+0x3c>)
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cc8:	e008      	b.n	8006cdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <prvResetNextTaskUnblockTime+0x38>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	4a04      	ldr	r2, [pc, #16]	; (8006cec <prvResetNextTaskUnblockTime+0x3c>)
 8006cda:	6013      	str	r3, [r2, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000abc 	.word	0x20000abc
 8006cec:	20000b24 	.word	0x20000b24

08006cf0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cfa:	4b29      	ldr	r3, [pc, #164]	; (8006da0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d00:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff facb 	bl	80062a2 <uxListRemove>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d12:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	2201      	movs	r2, #1
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43da      	mvns	r2, r3
 8006d20:	4b21      	ldr	r3, [pc, #132]	; (8006da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4013      	ands	r3, r2
 8006d26:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d30:	d10a      	bne.n	8006d48 <prvAddCurrentTaskToDelayedList+0x58>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d38:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4619      	mov	r1, r3
 8006d40:	481a      	ldr	r0, [pc, #104]	; (8006dac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d42:	f7ff fa51 	bl	80061e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d46:	e026      	b.n	8006d96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d50:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d209      	bcs.n	8006d74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d60:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7ff fa5f 	bl	8006230 <vListInsert>
}
 8006d72:	e010      	b.n	8006d96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f7ff fa55 	bl	8006230 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d202      	bcs.n	8006d96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006d90:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6013      	str	r3, [r2, #0]
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000b08 	.word	0x20000b08
 8006da4:	20000a04 	.word	0x20000a04
 8006da8:	20000b0c 	.word	0x20000b0c
 8006dac:	20000af0 	.word	0x20000af0
 8006db0:	20000ac0 	.word	0x20000ac0
 8006db4:	20000abc 	.word	0x20000abc
 8006db8:	20000b24 	.word	0x20000b24

08006dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3b04      	subs	r3, #4
 8006dcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3b04      	subs	r3, #4
 8006dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f023 0201 	bic.w	r2, r3, #1
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3b04      	subs	r3, #4
 8006dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dec:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <pxPortInitialiseStack+0x64>)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3b14      	subs	r3, #20
 8006df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3b04      	subs	r3, #4
 8006e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f06f 0202 	mvn.w	r2, #2
 8006e0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3b20      	subs	r3, #32
 8006e10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e12:	68fb      	ldr	r3, [r7, #12]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	08006e25 	.word	0x08006e25

08006e24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e2e:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <prvTaskExitError+0x5c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e36:	d00c      	beq.n	8006e52 <prvTaskExitError+0x2e>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	b672      	cpsid	i
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	b662      	cpsie	i
 8006e4c:	60fb      	str	r3, [r7, #12]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <prvTaskExitError+0x2c>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	b672      	cpsid	i
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	b662      	cpsie	i
 8006e66:	60bb      	str	r3, [r7, #8]
}
 8006e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e6a:	bf00      	nop
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0fc      	beq.n	8006e6c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	2000000c 	.word	0x2000000c
	...

08006e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <pxCurrentTCBConst2>)
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f380 8809 	msr	PSP, r0
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	4770      	bx	lr
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst2>:
 8006eb0:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006eb8:	4808      	ldr	r0, [pc, #32]	; (8006edc <prvPortStartFirstTask+0x24>)
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	6800      	ldr	r0, [r0, #0]
 8006ebe:	f380 8808 	msr	MSP, r0
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8814 	msr	CONTROL, r0
 8006eca:	b662      	cpsie	i
 8006ecc:	b661      	cpsie	f
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	df00      	svc	0
 8006ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eda:	bf00      	nop
 8006edc:	e000ed08 	.word	0xe000ed08

08006ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ee6:	4b37      	ldr	r3, [pc, #220]	; (8006fc4 <xPortStartScheduler+0xe4>)
 8006ee8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <xPortStartScheduler+0xe8>)
 8006f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f0e:	4b2f      	ldr	r3, [pc, #188]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f10:	2207      	movs	r2, #7
 8006f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f14:	e009      	b.n	8006f2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f16:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	4a2b      	ldr	r2, [pc, #172]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d0ef      	beq.n	8006f16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f36:	4b25      	ldr	r3, [pc, #148]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1c3 0307 	rsb	r3, r3, #7
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d00c      	beq.n	8006f5c <xPortStartScheduler+0x7c>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	b672      	cpsid	i
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	b662      	cpsie	i
 8006f56:	60bb      	str	r3, [r7, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f66:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <xPortStartScheduler+0xec>)
 8006f70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f7a:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <xPortStartScheduler+0xf0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a14      	ldr	r2, [pc, #80]	; (8006fd0 <xPortStartScheduler+0xf0>)
 8006f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f86:	4b12      	ldr	r3, [pc, #72]	; (8006fd0 <xPortStartScheduler+0xf0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a11      	ldr	r2, [pc, #68]	; (8006fd0 <xPortStartScheduler+0xf0>)
 8006f8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f92:	f000 f8dd 	bl	8007150 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f96:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <xPortStartScheduler+0xf4>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f9c:	f000 f8fc 	bl	8007198 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <xPortStartScheduler+0xf8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <xPortStartScheduler+0xf8>)
 8006fa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006faa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fac:	f7ff ff84 	bl	8006eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fb0:	f7ff fd5e 	bl	8006a70 <vTaskSwitchContext>
	prvTaskExitError();
 8006fb4:	f7ff ff36 	bl	8006e24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	e000e400 	.word	0xe000e400
 8006fc8:	20000b30 	.word	0x20000b30
 8006fcc:	20000b34 	.word	0x20000b34
 8006fd0:	e000ed20 	.word	0xe000ed20
 8006fd4:	2000000c 	.word	0x2000000c
 8006fd8:	e000ef34 	.word	0xe000ef34

08006fdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	b672      	cpsid	i
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	b662      	cpsie	i
 8006ff6:	607b      	str	r3, [r7, #4]
}
 8006ff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <vPortEnterCritical+0x60>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	4a0e      	ldr	r2, [pc, #56]	; (800703c <vPortEnterCritical+0x60>)
 8007002:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007004:	4b0d      	ldr	r3, [pc, #52]	; (800703c <vPortEnterCritical+0x60>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d111      	bne.n	8007030 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <vPortEnterCritical+0x64>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00c      	beq.n	8007030 <vPortEnterCritical+0x54>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	b672      	cpsid	i
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	b662      	cpsie	i
 800702a:	603b      	str	r3, [r7, #0]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <vPortEnterCritical+0x52>
	}
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	2000000c 	.word	0x2000000c
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <vPortExitCritical+0x54>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <vPortExitCritical+0x28>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	b672      	cpsid	i
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	b662      	cpsie	i
 8007066:	607b      	str	r3, [r7, #4]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <vPortExitCritical+0x54>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3b01      	subs	r3, #1
 8007072:	4a09      	ldr	r2, [pc, #36]	; (8007098 <vPortExitCritical+0x54>)
 8007074:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007076:	4b08      	ldr	r3, [pc, #32]	; (8007098 <vPortExitCritical+0x54>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <vPortExitCritical+0x46>
 800707e:	2300      	movs	r3, #0
 8007080:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007088:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	2000000c 	.word	0x2000000c
 800709c:	00000000 	.word	0x00000000

080070a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070a0:	f3ef 8009 	mrs	r0, PSP
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	4b15      	ldr	r3, [pc, #84]	; (8007100 <pxCurrentTCBConst>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	f01e 0f10 	tst.w	lr, #16
 80070b0:	bf08      	it	eq
 80070b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	6010      	str	r0, [r2, #0]
 80070bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070c4:	b672      	cpsid	i
 80070c6:	f380 8811 	msr	BASEPRI, r0
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	b662      	cpsie	i
 80070d4:	f7ff fccc 	bl	8006a70 <vTaskSwitchContext>
 80070d8:	f04f 0000 	mov.w	r0, #0
 80070dc:	f380 8811 	msr	BASEPRI, r0
 80070e0:	bc09      	pop	{r0, r3}
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	6808      	ldr	r0, [r1, #0]
 80070e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	f01e 0f10 	tst.w	lr, #16
 80070ee:	bf08      	it	eq
 80070f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070f4:	f380 8809 	msr	PSP, r0
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop

08007100 <pxCurrentTCBConst>:
 8007100:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop

08007108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	b672      	cpsid	i
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	b662      	cpsie	i
 8007122:	607b      	str	r3, [r7, #4]
}
 8007124:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007126:	f7ff fbe9 	bl	80068fc <xTaskIncrementTick>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <SysTick_Handler+0x44>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f383 8811 	msr	BASEPRI, r3
}
 8007142:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007154:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <vPortSetupTimerInterrupt+0x34>)
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800715a:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <vPortSetupTimerInterrupt+0x38>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <vPortSetupTimerInterrupt+0x3c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <vPortSetupTimerInterrupt+0x40>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	4a09      	ldr	r2, [pc, #36]	; (8007194 <vPortSetupTimerInterrupt+0x44>)
 800716e:	3b01      	subs	r3, #1
 8007170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007172:	4b04      	ldr	r3, [pc, #16]	; (8007184 <vPortSetupTimerInterrupt+0x34>)
 8007174:	2207      	movs	r2, #7
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	e000e010 	.word	0xe000e010
 8007188:	e000e018 	.word	0xe000e018
 800718c:	20000000 	.word	0x20000000
 8007190:	10624dd3 	.word	0x10624dd3
 8007194:	e000e014 	.word	0xe000e014

08007198 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007198:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071a8 <vPortEnableVFP+0x10>
 800719c:	6801      	ldr	r1, [r0, #0]
 800719e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071a2:	6001      	str	r1, [r0, #0]
 80071a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071a6:	bf00      	nop
 80071a8:	e000ed88 	.word	0xe000ed88

080071ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071b8:	f7ff faf4 	bl	80067a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071bc:	4b5b      	ldr	r3, [pc, #364]	; (800732c <pvPortMalloc+0x180>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071c4:	f000 f91a 	bl	80073fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071c8:	4b59      	ldr	r3, [pc, #356]	; (8007330 <pvPortMalloc+0x184>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8092 	bne.w	80072fa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01f      	beq.n	800721c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80071dc:	2208      	movs	r2, #8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4413      	add	r3, r2
 80071e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d016      	beq.n	800721c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f023 0307 	bic.w	r3, r3, #7
 80071f4:	3308      	adds	r3, #8
 80071f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <pvPortMalloc+0x70>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	b672      	cpsid	i
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	b662      	cpsie	i
 8007216:	617b      	str	r3, [r7, #20]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d06b      	beq.n	80072fa <pvPortMalloc+0x14e>
 8007222:	4b44      	ldr	r3, [pc, #272]	; (8007334 <pvPortMalloc+0x188>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d866      	bhi.n	80072fa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800722c:	4b42      	ldr	r3, [pc, #264]	; (8007338 <pvPortMalloc+0x18c>)
 800722e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007230:	4b41      	ldr	r3, [pc, #260]	; (8007338 <pvPortMalloc+0x18c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007236:	e004      	b.n	8007242 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d903      	bls.n	8007254 <pvPortMalloc+0xa8>
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f1      	bne.n	8007238 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007254:	4b35      	ldr	r3, [pc, #212]	; (800732c <pvPortMalloc+0x180>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	429a      	cmp	r2, r3
 800725c:	d04d      	beq.n	80072fa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2208      	movs	r2, #8
 8007264:	4413      	add	r3, r2
 8007266:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	1ad2      	subs	r2, r2, r3
 8007278:	2308      	movs	r3, #8
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	429a      	cmp	r2, r3
 800727e:	d921      	bls.n	80072c4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4413      	add	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00c      	beq.n	80072ac <pvPortMalloc+0x100>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	b672      	cpsid	i
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	b662      	cpsie	i
 80072a6:	613b      	str	r3, [r7, #16]
}
 80072a8:	bf00      	nop
 80072aa:	e7fe      	b.n	80072aa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072be:	69b8      	ldr	r0, [r7, #24]
 80072c0:	f000 f8fe 	bl	80074c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072c4:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <pvPortMalloc+0x188>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	4a19      	ldr	r2, [pc, #100]	; (8007334 <pvPortMalloc+0x188>)
 80072d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072d2:	4b18      	ldr	r3, [pc, #96]	; (8007334 <pvPortMalloc+0x188>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b19      	ldr	r3, [pc, #100]	; (800733c <pvPortMalloc+0x190>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d203      	bcs.n	80072e6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072de:	4b15      	ldr	r3, [pc, #84]	; (8007334 <pvPortMalloc+0x188>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a16      	ldr	r2, [pc, #88]	; (800733c <pvPortMalloc+0x190>)
 80072e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	4b11      	ldr	r3, [pc, #68]	; (8007330 <pvPortMalloc+0x184>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072fa:	f7ff fa61 	bl	80067c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00c      	beq.n	8007322 <pvPortMalloc+0x176>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	b672      	cpsid	i
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	b662      	cpsie	i
 800731c:	60fb      	str	r3, [r7, #12]
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <pvPortMalloc+0x174>
	return pvReturn;
 8007322:	69fb      	ldr	r3, [r7, #28]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3728      	adds	r7, #40	; 0x28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20004740 	.word	0x20004740
 8007330:	2000474c 	.word	0x2000474c
 8007334:	20004744 	.word	0x20004744
 8007338:	20004738 	.word	0x20004738
 800733c:	20004748 	.word	0x20004748

08007340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d04c      	beq.n	80073ec <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007352:	2308      	movs	r3, #8
 8007354:	425b      	negs	r3, r3
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	4b23      	ldr	r3, [pc, #140]	; (80073f4 <vPortFree+0xb4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4013      	ands	r3, r2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10c      	bne.n	8007388 <vPortFree+0x48>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	b672      	cpsid	i
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	b662      	cpsie	i
 8007382:	60fb      	str	r3, [r7, #12]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00c      	beq.n	80073aa <vPortFree+0x6a>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	b672      	cpsid	i
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	b662      	cpsie	i
 80073a4:	60bb      	str	r3, [r7, #8]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	4b11      	ldr	r3, [pc, #68]	; (80073f4 <vPortFree+0xb4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d019      	beq.n	80073ec <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d115      	bne.n	80073ec <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <vPortFree+0xb4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	43db      	mvns	r3, r3
 80073ca:	401a      	ands	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073d0:	f7ff f9e8 	bl	80067a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <vPortFree+0xb8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4413      	add	r3, r2
 80073de:	4a06      	ldr	r2, [pc, #24]	; (80073f8 <vPortFree+0xb8>)
 80073e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073e2:	6938      	ldr	r0, [r7, #16]
 80073e4:	f000 f86c 	bl	80074c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073e8:	f7ff f9ea 	bl	80067c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073ec:	bf00      	nop
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	2000474c 	.word	0x2000474c
 80073f8:	20004744 	.word	0x20004744

080073fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007402:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007406:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007408:	4b27      	ldr	r3, [pc, #156]	; (80074a8 <prvHeapInit+0xac>)
 800740a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3307      	adds	r3, #7
 800741a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0307 	bic.w	r3, r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <prvHeapInit+0xac>)
 800742c:	4413      	add	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007434:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <prvHeapInit+0xb0>)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800743a:	4b1c      	ldr	r3, [pc, #112]	; (80074ac <prvHeapInit+0xb0>)
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	4413      	add	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007448:	2208      	movs	r2, #8
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0307 	bic.w	r3, r3, #7
 8007456:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <prvHeapInit+0xb4>)
 800745c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800745e:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <prvHeapInit+0xb4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <prvHeapInit+0xb4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	1ad2      	subs	r2, r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800747c:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <prvHeapInit+0xb4>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <prvHeapInit+0xb8>)
 800748a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <prvHeapInit+0xbc>)
 8007492:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <prvHeapInit+0xc0>)
 8007496:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800749a:	601a      	str	r2, [r3, #0]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20000b38 	.word	0x20000b38
 80074ac:	20004738 	.word	0x20004738
 80074b0:	20004740 	.word	0x20004740
 80074b4:	20004748 	.word	0x20004748
 80074b8:	20004744 	.word	0x20004744
 80074bc:	2000474c 	.word	0x2000474c

080074c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074c8:	4b28      	ldr	r3, [pc, #160]	; (800756c <prvInsertBlockIntoFreeList+0xac>)
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e002      	b.n	80074d4 <prvInsertBlockIntoFreeList+0x14>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d8f7      	bhi.n	80074ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	4413      	add	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d108      	bne.n	8007502 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	441a      	add	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	441a      	add	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d118      	bne.n	8007548 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4b15      	ldr	r3, [pc, #84]	; (8007570 <prvInsertBlockIntoFreeList+0xb0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d00d      	beq.n	800753e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	441a      	add	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e008      	b.n	8007550 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800753e:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <prvInsertBlockIntoFreeList+0xb0>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	e003      	b.n	8007550 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	d002      	beq.n	800755e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20004738 	.word	0x20004738
 8007570:	20004740 	.word	0x20004740

08007574 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	ed87 0a01 	vstr	s0, [r7, #4]
 800757e:	ed97 0a01 	vldr	s0, [r7, #4]
 8007582:	f000 f97d 	bl	8007880 <sinf>
 8007586:	eef0 7a40 	vmov.f32	s15, s0
 800758a:	eeb0 0a67 	vmov.f32	s0, s15
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	0000      	movs	r0, r0
	...

08007598 <MapToFrequency>:
float normalizedY;
float calculated_angle;
uint16_t frequency;

// Function to map ADC values to frequency
int MapToFrequency(uint16_t xValue, uint16_t yValue) {
 8007598:	b580      	push	{r7, lr}
 800759a:	ed2d 8b02 	vpush	{d8}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	460a      	mov	r2, r1
 80075a6:	80fb      	strh	r3, [r7, #6]
 80075a8:	4613      	mov	r3, r2
 80075aa:	80bb      	strh	r3, [r7, #4]
    // Normalize ADC values to the range [0, 1]
    normalizedX = static_cast<float>(xValue - ADC_MIN) / (ADC_MAX - ADC_MIN);
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075b6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007660 <MapToFrequency+0xc8>
 80075ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075be:	4b29      	ldr	r3, [pc, #164]	; (8007664 <MapToFrequency+0xcc>)
 80075c0:	edc3 7a00 	vstr	s15, [r3]
    normalizedY = static_cast<float>(yValue - ADC_MIN) / (ADC_MAX - ADC_MIN);
 80075c4:	88bb      	ldrh	r3, [r7, #4]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ce:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007660 <MapToFrequency+0xc8>
 80075d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <MapToFrequency+0xd0>)
 80075d8:	edc3 7a00 	vstr	s15, [r3]

    // Calculate angle based on joystick position (0 to 2*pi)
    calculated_angle = 2 * M_PI * normalizedX;
 80075dc:	4b21      	ldr	r3, [pc, #132]	; (8007664 <MapToFrequency+0xcc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7f9 f8a3 	bl	800072c <__aeabi_f2d>
 80075e6:	a31c      	add	r3, pc, #112	; (adr r3, 8007658 <MapToFrequency+0xc0>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f8 fe10 	bl	8000210 <__aeabi_dmul>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	f7f9 f8f0 	bl	80007dc <__aeabi_d2f>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <MapToFrequency+0xd4>)
 8007600:	6013      	str	r3, [r2, #0]

    // Calculate frequency based on joystick position and range
    frequency = static_cast<uint16_t>(MIN_FREQUENCY + (MAX_FREQUENCY - MIN_FREQUENCY) * normalizedY +
 8007602:	4b19      	ldr	r3, [pc, #100]	; (8007668 <MapToFrequency+0xd0>)
 8007604:	edd3 7a00 	vldr	s15, [r3]
 8007608:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007670 <MapToFrequency+0xd8>
 800760c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007610:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007674 <MapToFrequency+0xdc>
 8007614:	ee37 8a87 	vadd.f32	s16, s15, s14
                                      50 * std::sin(calculated_angle)); // Adjust the modulation depth
 8007618:	4b14      	ldr	r3, [pc, #80]	; (800766c <MapToFrequency+0xd4>)
 800761a:	edd3 7a00 	vldr	s15, [r3]
 800761e:	eeb0 0a67 	vmov.f32	s0, s15
 8007622:	f7ff ffa7 	bl	8007574 <_ZSt3sinf>
 8007626:	eef0 7a40 	vmov.f32	s15, s0
 800762a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8007678 <MapToFrequency+0xe0>
 800762e:	ee67 7a87 	vmul.f32	s15, s15, s14
    frequency = static_cast<uint16_t>(MIN_FREQUENCY + (MAX_FREQUENCY - MIN_FREQUENCY) * normalizedY +
 8007632:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763a:	ee17 3a90 	vmov	r3, s15
 800763e:	b29a      	uxth	r2, r3
 8007640:	4b0e      	ldr	r3, [pc, #56]	; (800767c <MapToFrequency+0xe4>)
 8007642:	801a      	strh	r2, [r3, #0]
    return frequency;
 8007644:	4b0d      	ldr	r3, [pc, #52]	; (800767c <MapToFrequency+0xe4>)
 8007646:	881b      	ldrh	r3, [r3, #0]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	ecbd 8b02 	vpop	{d8}
 8007652:	bd80      	pop	{r7, pc}
 8007654:	f3af 8000 	nop.w
 8007658:	54442d18 	.word	0x54442d18
 800765c:	401921fb 	.word	0x401921fb
 8007660:	457ff000 	.word	0x457ff000
 8007664:	20004750 	.word	0x20004750
 8007668:	20004754 	.word	0x20004754
 800766c:	20004758 	.word	0x20004758
 8007670:	469ab000 	.word	0x469ab000
 8007674:	43480000 	.word	0x43480000
 8007678:	42480000 	.word	0x42480000
 800767c:	2000475c 	.word	0x2000475c

08007680 <HAL_GPIO_EXTI_Callback>:

uint16_t volatile adc1Value;
uint16_t volatile adc2Value;
uint8_t pwm_down_flag;
/*Basically an unused Callback and unimplemented feature of joystick button.*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PF3_JoystickButton_Pin) {
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	2b08      	cmp	r3, #8
 800768e:	d109      	bne.n	80076a4 <HAL_GPIO_EXTI_Callback+0x24>
		playSoundBool = !playSoundBool;
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <HAL_GPIO_EXTI_Callback+0x30>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	bf0c      	ite	eq
 8007698:	2301      	moveq	r3, #1
 800769a:	2300      	movne	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	4b03      	ldr	r3, [pc, #12]	; (80076b0 <HAL_GPIO_EXTI_Callback+0x30>)
 80076a2:	701a      	strb	r2, [r3, #0]
	}
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20004a1a 	.word	0x20004a1a

080076b4 <HAL_ADC_ConvCpltCallback>:
/* Callback _weak override in C  Used for the FreeRTOS Thread "ADC_TO_PWM" checks flags by polling .*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a0a      	ldr	r2, [pc, #40]	; (80076e8 <HAL_ADC_ConvCpltCallback+0x34>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d103      	bne.n	80076cc <HAL_ADC_ConvCpltCallback+0x18>
		adcCpltInterruptFlag1 = 1;
 80076c4:	4b09      	ldr	r3, [pc, #36]	; (80076ec <HAL_ADC_ConvCpltCallback+0x38>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	701a      	strb	r2, [r3, #0]
	} else if (hadc == &hadc2) {
		adcCpltInterruptFlag2 = 1;
		// Additional processing for ADC2
	}
	// You can add more conditions for other ADCs if needed
}
 80076ca:	e006      	b.n	80076da <HAL_ADC_ConvCpltCallback+0x26>
	} else if (hadc == &hadc2) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a08      	ldr	r2, [pc, #32]	; (80076f0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d102      	bne.n	80076da <HAL_ADC_ConvCpltCallback+0x26>
		adcCpltInterruptFlag2 = 1;
 80076d4:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <HAL_ADC_ConvCpltCallback+0x40>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	701a      	strb	r2, [r3, #0]
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000344 	.word	0x20000344
 80076ec:	20004a18 	.word	0x20004a18
 80076f0:	2000038c 	.word	0x2000038c
 80076f4:	20004a19 	.word	0x20004a19

080076f8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Callback _weak override in C , Used
 *  to shift frequency without causing accidentally a high
 *  frequency beep noise due cutting on working cycle to the buzzer
 * */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

	if(adcCpltInterruptFlag1 && adcCpltInterruptFlag2){
 8007700:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d006      	beq.n	8007722 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
		HAL_TIM_PWM_Stop_IT(&htim3,TIM_CHANNEL_1);
 8007714:	2100      	movs	r1, #0
 8007716:	480a      	ldr	r0, [pc, #40]	; (8007740 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8007718:	f7fc fd20 	bl	800415c <HAL_TIM_PWM_Stop_IT>
		pwm_down_flag=1;
 800771c:	4b09      	ldr	r3, [pc, #36]	; (8007744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800771e:	2201      	movs	r2, #1
 8007720:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim3) {
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a06      	ldr	r2, [pc, #24]	; (8007740 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d102      	bne.n	8007730 <HAL_TIM_PWM_PulseFinishedCallback+0x38>


		pwm_down_flag = 1;
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
		}


}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20004a18 	.word	0x20004a18
 800773c:	20004a19 	.word	0x20004a19
 8007740:	200003d4 	.word	0x200003d4
 8007744:	20004a20 	.word	0x20004a20

08007748 <Set_PWM_Frequency>:
/*
 * Function that sets a frequency to the PWM generation channel.
 * */
void Set_PWM_Frequency(uint32_t frequency) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // Stop PWM

	htim3.Init.Period = HAL_RCC_GetHCLKFreq() / (frequency) - 1; // Calculate new period
 8007750:	f7fb fe34 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8007754:	4602      	mov	r2, r0
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	fbb2 f3f3 	udiv	r3, r2, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	4a17      	ldr	r2, [pc, #92]	; (80077bc <Set_PWM_Frequency+0x74>)
 8007760:	60d3      	str	r3, [r2, #12]

	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8007762:	4816      	ldr	r0, [pc, #88]	; (80077bc <Set_PWM_Frequency+0x74>)
 8007764:	f7fc fa80 	bl	8003c68 <HAL_TIM_Base_Init>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <Set_PWM_Frequency+0x2c>
		// Turn on the red LED to indicate failure
		// HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
		Error_Handler();
 800776e:	f7f9 fdb1 	bl	80012d4 <Error_Handler>
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);

		//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Restart PWM
	}
}
 8007772:	e01f      	b.n	80077b4 <Set_PWM_Frequency+0x6c>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8007774:	2201      	movs	r2, #1
 8007776:	2101      	movs	r1, #1
 8007778:	4811      	ldr	r0, [pc, #68]	; (80077c0 <Set_PWM_Frequency+0x78>)
 800777a:	f7fa ffff 	bl	800277c <HAL_GPIO_WritePin>
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 800777e:	f107 030c 	add.w	r3, r7, #12
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	605a      	str	r2, [r3, #4]
 8007788:	609a      	str	r2, [r3, #8]
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	611a      	str	r2, [r3, #16]
 800778e:	615a      	str	r2, [r3, #20]
 8007790:	619a      	str	r2, [r3, #24]
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007792:	2360      	movs	r3, #96	; 0x60
 8007794:	60fb      	str	r3, [r7, #12]
		sConfigOC.Pulse = htim3.Init.Period / 2; // 50% duty cycle initially
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <Set_PWM_Frequency+0x74>)
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	613b      	str	r3, [r7, #16]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80077a6:	f107 030c 	add.w	r3, r7, #12
 80077aa:	2200      	movs	r2, #0
 80077ac:	4619      	mov	r1, r3
 80077ae:	4803      	ldr	r0, [pc, #12]	; (80077bc <Set_PWM_Frequency+0x74>)
 80077b0:	f7fc fec2 	bl	8004538 <HAL_TIM_PWM_ConfigChannel>
}
 80077b4:	bf00      	nop
 80077b6:	3728      	adds	r7, #40	; 0x28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200003d4 	.word	0x200003d4
 80077c0:	40020400 	.word	0x40020400

080077c4 <ADC_To_PWM_Conv_Start>:
 * @brief Function implementing the ADC_To_PWM_Conv thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ADC_To_PWM_Conv_Start */
void ADC_To_PWM_Conv_Start(void const *argument) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ADC_To_PWM_Conv_Start */
	/* Infinite loop */
	//Set_PWM_DutyCycle(100);
	Set_PWM_Frequency(2000);
 80077cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80077d0:	f7ff ffba 	bl	8007748 <Set_PWM_Frequency>
	if (HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) == HAL_OK) {
 80077d4:	2100      	movs	r1, #0
 80077d6:	4822      	ldr	r0, [pc, #136]	; (8007860 <ADC_To_PWM_Conv_Start+0x9c>)
 80077d8:	f7fc fb78 	bl	8003ecc <HAL_TIM_PWM_Start_IT>
	}

	for (;;) {

		if (adcCpltInterruptFlag1 && adcCpltInterruptFlag2 && pwm_down_flag) {
 80077dc:	4b21      	ldr	r3, [pc, #132]	; (8007864 <ADC_To_PWM_Conv_Start+0xa0>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0fa      	beq.n	80077dc <ADC_To_PWM_Conv_Start+0x18>
 80077e6:	4b20      	ldr	r3, [pc, #128]	; (8007868 <ADC_To_PWM_Conv_Start+0xa4>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f5      	beq.n	80077dc <ADC_To_PWM_Conv_Start+0x18>
 80077f0:	4b1e      	ldr	r3, [pc, #120]	; (800786c <ADC_To_PWM_Conv_Start+0xa8>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0f1      	beq.n	80077dc <ADC_To_PWM_Conv_Start+0x18>
			// Read value.
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80077f8:	2100      	movs	r1, #0
 80077fa:	4819      	ldr	r0, [pc, #100]	; (8007860 <ADC_To_PWM_Conv_Start+0x9c>)
 80077fc:	f7fc fcae 	bl	800415c <HAL_TIM_PWM_Stop_IT>

			adc1Value = HAL_ADC_GetValue(&hadc1);
 8007800:	481b      	ldr	r0, [pc, #108]	; (8007870 <ADC_To_PWM_Conv_Start+0xac>)
 8007802:	f7fa fab1 	bl	8001d68 <HAL_ADC_GetValue>
 8007806:	4603      	mov	r3, r0
 8007808:	b29a      	uxth	r2, r3
 800780a:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <ADC_To_PWM_Conv_Start+0xb0>)
 800780c:	801a      	strh	r2, [r3, #0]
			adc2Value = HAL_ADC_GetValue(&hadc2);
 800780e:	481a      	ldr	r0, [pc, #104]	; (8007878 <ADC_To_PWM_Conv_Start+0xb4>)
 8007810:	f7fa faaa 	bl	8001d68 <HAL_ADC_GetValue>
 8007814:	4603      	mov	r3, r0
 8007816:	b29a      	uxth	r2, r3
 8007818:	4b18      	ldr	r3, [pc, #96]	; (800787c <ADC_To_PWM_Conv_Start+0xb8>)
 800781a:	801a      	strh	r2, [r3, #0]


			Set_PWM_Frequency(MapToFrequency(adc1Value,adc2Value));
 800781c:	4b15      	ldr	r3, [pc, #84]	; (8007874 <ADC_To_PWM_Conv_Start+0xb0>)
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	4a16      	ldr	r2, [pc, #88]	; (800787c <ADC_To_PWM_Conv_Start+0xb8>)
 8007824:	8812      	ldrh	r2, [r2, #0]
 8007826:	b292      	uxth	r2, r2
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff feb4 	bl	8007598 <MapToFrequency>
 8007830:	4603      	mov	r3, r0
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff ff88 	bl	8007748 <Set_PWM_Frequency>
			adcCpltInterruptFlag1 = 0;
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <ADC_To_PWM_Conv_Start+0xa0>)
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
			adcCpltInterruptFlag2 = 0;
 800783e:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <ADC_To_PWM_Conv_Start+0xa4>)
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]

			HAL_ADC_Start_IT(&hadc1);
 8007844:	480a      	ldr	r0, [pc, #40]	; (8007870 <ADC_To_PWM_Conv_Start+0xac>)
 8007846:	f7fa f8a7 	bl	8001998 <HAL_ADC_Start_IT>
			HAL_ADC_Start_IT(&hadc2);
 800784a:	480b      	ldr	r0, [pc, #44]	; (8007878 <ADC_To_PWM_Conv_Start+0xb4>)
 800784c:	f7fa f8a4 	bl	8001998 <HAL_ADC_Start_IT>
			pwm_down_flag = 0;
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <ADC_To_PWM_Conv_Start+0xa8>)
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8007856:	2100      	movs	r1, #0
 8007858:	4801      	ldr	r0, [pc, #4]	; (8007860 <ADC_To_PWM_Conv_Start+0x9c>)
 800785a:	f7fc fb37 	bl	8003ecc <HAL_TIM_PWM_Start_IT>
		if (adcCpltInterruptFlag1 && adcCpltInterruptFlag2 && pwm_down_flag) {
 800785e:	e7bd      	b.n	80077dc <ADC_To_PWM_Conv_Start+0x18>
 8007860:	200003d4 	.word	0x200003d4
 8007864:	20004a18 	.word	0x20004a18
 8007868:	20004a19 	.word	0x20004a19
 800786c:	20004a20 	.word	0x20004a20
 8007870:	20000344 	.word	0x20000344
 8007874:	20004a1c 	.word	0x20004a1c
 8007878:	2000038c 	.word	0x2000038c
 800787c:	20004a1e 	.word	0x20004a1e

08007880 <sinf>:
 8007880:	ee10 3a10 	vmov	r3, s0
 8007884:	b507      	push	{r0, r1, r2, lr}
 8007886:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <sinf+0x84>)
 8007888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800788c:	4293      	cmp	r3, r2
 800788e:	dc07      	bgt.n	80078a0 <sinf+0x20>
 8007890:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007908 <sinf+0x88>
 8007894:	2000      	movs	r0, #0
 8007896:	b003      	add	sp, #12
 8007898:	f85d eb04 	ldr.w	lr, [sp], #4
 800789c:	f000 bc48 	b.w	8008130 <__kernel_sinf>
 80078a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80078a4:	db04      	blt.n	80078b0 <sinf+0x30>
 80078a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80078aa:	b003      	add	sp, #12
 80078ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80078b0:	4668      	mov	r0, sp
 80078b2:	f000 f82b 	bl	800790c <__ieee754_rem_pio2f>
 80078b6:	f000 0003 	and.w	r0, r0, #3
 80078ba:	2801      	cmp	r0, #1
 80078bc:	d00a      	beq.n	80078d4 <sinf+0x54>
 80078be:	2802      	cmp	r0, #2
 80078c0:	d00f      	beq.n	80078e2 <sinf+0x62>
 80078c2:	b9c0      	cbnz	r0, 80078f6 <sinf+0x76>
 80078c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80078c8:	ed9d 0a00 	vldr	s0, [sp]
 80078cc:	2001      	movs	r0, #1
 80078ce:	f000 fc2f 	bl	8008130 <__kernel_sinf>
 80078d2:	e7ea      	b.n	80078aa <sinf+0x2a>
 80078d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80078d8:	ed9d 0a00 	vldr	s0, [sp]
 80078dc:	f000 f952 	bl	8007b84 <__kernel_cosf>
 80078e0:	e7e3      	b.n	80078aa <sinf+0x2a>
 80078e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80078e6:	ed9d 0a00 	vldr	s0, [sp]
 80078ea:	2001      	movs	r0, #1
 80078ec:	f000 fc20 	bl	8008130 <__kernel_sinf>
 80078f0:	eeb1 0a40 	vneg.f32	s0, s0
 80078f4:	e7d9      	b.n	80078aa <sinf+0x2a>
 80078f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80078fa:	ed9d 0a00 	vldr	s0, [sp]
 80078fe:	f000 f941 	bl	8007b84 <__kernel_cosf>
 8007902:	e7f5      	b.n	80078f0 <sinf+0x70>
 8007904:	3f490fd8 	.word	0x3f490fd8
 8007908:	00000000 	.word	0x00000000

0800790c <__ieee754_rem_pio2f>:
 800790c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790e:	ee10 6a10 	vmov	r6, s0
 8007912:	4b8e      	ldr	r3, [pc, #568]	; (8007b4c <__ieee754_rem_pio2f+0x240>)
 8007914:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007918:	429d      	cmp	r5, r3
 800791a:	b087      	sub	sp, #28
 800791c:	eef0 7a40 	vmov.f32	s15, s0
 8007920:	4604      	mov	r4, r0
 8007922:	dc05      	bgt.n	8007930 <__ieee754_rem_pio2f+0x24>
 8007924:	2300      	movs	r3, #0
 8007926:	ed80 0a00 	vstr	s0, [r0]
 800792a:	6043      	str	r3, [r0, #4]
 800792c:	2000      	movs	r0, #0
 800792e:	e01a      	b.n	8007966 <__ieee754_rem_pio2f+0x5a>
 8007930:	4b87      	ldr	r3, [pc, #540]	; (8007b50 <__ieee754_rem_pio2f+0x244>)
 8007932:	429d      	cmp	r5, r3
 8007934:	dc46      	bgt.n	80079c4 <__ieee754_rem_pio2f+0xb8>
 8007936:	2e00      	cmp	r6, #0
 8007938:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007b54 <__ieee754_rem_pio2f+0x248>
 800793c:	4b86      	ldr	r3, [pc, #536]	; (8007b58 <__ieee754_rem_pio2f+0x24c>)
 800793e:	f025 050f 	bic.w	r5, r5, #15
 8007942:	dd1f      	ble.n	8007984 <__ieee754_rem_pio2f+0x78>
 8007944:	429d      	cmp	r5, r3
 8007946:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800794a:	d00e      	beq.n	800796a <__ieee754_rem_pio2f+0x5e>
 800794c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007b5c <__ieee754_rem_pio2f+0x250>
 8007950:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007954:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007958:	ed80 0a00 	vstr	s0, [r0]
 800795c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007960:	2001      	movs	r0, #1
 8007962:	edc4 7a01 	vstr	s15, [r4, #4]
 8007966:	b007      	add	sp, #28
 8007968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800796a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007b60 <__ieee754_rem_pio2f+0x254>
 800796e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007b64 <__ieee754_rem_pio2f+0x258>
 8007972:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007976:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800797a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800797e:	edc0 6a00 	vstr	s13, [r0]
 8007982:	e7eb      	b.n	800795c <__ieee754_rem_pio2f+0x50>
 8007984:	429d      	cmp	r5, r3
 8007986:	ee77 7a80 	vadd.f32	s15, s15, s0
 800798a:	d00e      	beq.n	80079aa <__ieee754_rem_pio2f+0x9e>
 800798c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007b5c <__ieee754_rem_pio2f+0x250>
 8007990:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007994:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007998:	ed80 0a00 	vstr	s0, [r0]
 800799c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a4:	edc4 7a01 	vstr	s15, [r4, #4]
 80079a8:	e7dd      	b.n	8007966 <__ieee754_rem_pio2f+0x5a>
 80079aa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007b60 <__ieee754_rem_pio2f+0x254>
 80079ae:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007b64 <__ieee754_rem_pio2f+0x258>
 80079b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80079b6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80079ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079be:	edc0 6a00 	vstr	s13, [r0]
 80079c2:	e7eb      	b.n	800799c <__ieee754_rem_pio2f+0x90>
 80079c4:	4b68      	ldr	r3, [pc, #416]	; (8007b68 <__ieee754_rem_pio2f+0x25c>)
 80079c6:	429d      	cmp	r5, r3
 80079c8:	dc72      	bgt.n	8007ab0 <__ieee754_rem_pio2f+0x1a4>
 80079ca:	f000 fbf9 	bl	80081c0 <fabsf>
 80079ce:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007b6c <__ieee754_rem_pio2f+0x260>
 80079d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80079d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80079da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079e2:	ee17 0a90 	vmov	r0, s15
 80079e6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007b54 <__ieee754_rem_pio2f+0x248>
 80079ea:	eea7 0a67 	vfms.f32	s0, s14, s15
 80079ee:	281f      	cmp	r0, #31
 80079f0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007b5c <__ieee754_rem_pio2f+0x250>
 80079f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f8:	eeb1 6a47 	vneg.f32	s12, s14
 80079fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007a00:	ee16 2a90 	vmov	r2, s13
 8007a04:	dc1c      	bgt.n	8007a40 <__ieee754_rem_pio2f+0x134>
 8007a06:	495a      	ldr	r1, [pc, #360]	; (8007b70 <__ieee754_rem_pio2f+0x264>)
 8007a08:	1e47      	subs	r7, r0, #1
 8007a0a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007a0e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007a12:	428b      	cmp	r3, r1
 8007a14:	d014      	beq.n	8007a40 <__ieee754_rem_pio2f+0x134>
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	ed94 7a00 	vldr	s14, [r4]
 8007a1c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007a20:	2e00      	cmp	r6, #0
 8007a22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a26:	ed84 0a01 	vstr	s0, [r4, #4]
 8007a2a:	da9c      	bge.n	8007966 <__ieee754_rem_pio2f+0x5a>
 8007a2c:	eeb1 7a47 	vneg.f32	s14, s14
 8007a30:	eeb1 0a40 	vneg.f32	s0, s0
 8007a34:	ed84 7a00 	vstr	s14, [r4]
 8007a38:	ed84 0a01 	vstr	s0, [r4, #4]
 8007a3c:	4240      	negs	r0, r0
 8007a3e:	e792      	b.n	8007966 <__ieee754_rem_pio2f+0x5a>
 8007a40:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007a44:	15eb      	asrs	r3, r5, #23
 8007a46:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007a4a:	2d08      	cmp	r5, #8
 8007a4c:	dde3      	ble.n	8007a16 <__ieee754_rem_pio2f+0x10a>
 8007a4e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007b60 <__ieee754_rem_pio2f+0x254>
 8007a52:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b64 <__ieee754_rem_pio2f+0x258>
 8007a56:	eef0 6a40 	vmov.f32	s13, s0
 8007a5a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007a5e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007a62:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007a66:	eef0 7a40 	vmov.f32	s15, s0
 8007a6a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007a6e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007a72:	ee15 2a90 	vmov	r2, s11
 8007a76:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007a7a:	1a5b      	subs	r3, r3, r1
 8007a7c:	2b19      	cmp	r3, #25
 8007a7e:	dc04      	bgt.n	8007a8a <__ieee754_rem_pio2f+0x17e>
 8007a80:	edc4 5a00 	vstr	s11, [r4]
 8007a84:	eeb0 0a66 	vmov.f32	s0, s13
 8007a88:	e7c6      	b.n	8007a18 <__ieee754_rem_pio2f+0x10c>
 8007a8a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007b74 <__ieee754_rem_pio2f+0x268>
 8007a8e:	eeb0 0a66 	vmov.f32	s0, s13
 8007a92:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007a96:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007a9a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007b78 <__ieee754_rem_pio2f+0x26c>
 8007a9e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007aa2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007aa6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007aaa:	ed84 7a00 	vstr	s14, [r4]
 8007aae:	e7b3      	b.n	8007a18 <__ieee754_rem_pio2f+0x10c>
 8007ab0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007ab4:	db06      	blt.n	8007ac4 <__ieee754_rem_pio2f+0x1b8>
 8007ab6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007aba:	edc0 7a01 	vstr	s15, [r0, #4]
 8007abe:	edc0 7a00 	vstr	s15, [r0]
 8007ac2:	e733      	b.n	800792c <__ieee754_rem_pio2f+0x20>
 8007ac4:	15ea      	asrs	r2, r5, #23
 8007ac6:	3a86      	subs	r2, #134	; 0x86
 8007ac8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007acc:	ee07 3a90 	vmov	s15, r3
 8007ad0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ad4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007b7c <__ieee754_rem_pio2f+0x270>
 8007ad8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007adc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ae0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ae8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007aec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007af0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007af4:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007af8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007afc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b04:	edcd 7a05 	vstr	s15, [sp, #20]
 8007b08:	d11e      	bne.n	8007b48 <__ieee754_rem_pio2f+0x23c>
 8007b0a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	bf14      	ite	ne
 8007b14:	2302      	movne	r3, #2
 8007b16:	2301      	moveq	r3, #1
 8007b18:	4919      	ldr	r1, [pc, #100]	; (8007b80 <__ieee754_rem_pio2f+0x274>)
 8007b1a:	9101      	str	r1, [sp, #4]
 8007b1c:	2102      	movs	r1, #2
 8007b1e:	9100      	str	r1, [sp, #0]
 8007b20:	a803      	add	r0, sp, #12
 8007b22:	4621      	mov	r1, r4
 8007b24:	f000 f88e 	bl	8007c44 <__kernel_rem_pio2f>
 8007b28:	2e00      	cmp	r6, #0
 8007b2a:	f6bf af1c 	bge.w	8007966 <__ieee754_rem_pio2f+0x5a>
 8007b2e:	edd4 7a00 	vldr	s15, [r4]
 8007b32:	eef1 7a67 	vneg.f32	s15, s15
 8007b36:	edc4 7a00 	vstr	s15, [r4]
 8007b3a:	edd4 7a01 	vldr	s15, [r4, #4]
 8007b3e:	eef1 7a67 	vneg.f32	s15, s15
 8007b42:	edc4 7a01 	vstr	s15, [r4, #4]
 8007b46:	e779      	b.n	8007a3c <__ieee754_rem_pio2f+0x130>
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e7e5      	b.n	8007b18 <__ieee754_rem_pio2f+0x20c>
 8007b4c:	3f490fd8 	.word	0x3f490fd8
 8007b50:	4016cbe3 	.word	0x4016cbe3
 8007b54:	3fc90f80 	.word	0x3fc90f80
 8007b58:	3fc90fd0 	.word	0x3fc90fd0
 8007b5c:	37354443 	.word	0x37354443
 8007b60:	37354400 	.word	0x37354400
 8007b64:	2e85a308 	.word	0x2e85a308
 8007b68:	43490f80 	.word	0x43490f80
 8007b6c:	3f22f984 	.word	0x3f22f984
 8007b70:	080085a4 	.word	0x080085a4
 8007b74:	2e85a300 	.word	0x2e85a300
 8007b78:	248d3132 	.word	0x248d3132
 8007b7c:	43800000 	.word	0x43800000
 8007b80:	08008624 	.word	0x08008624

08007b84 <__kernel_cosf>:
 8007b84:	ee10 3a10 	vmov	r3, s0
 8007b88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b8c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007b90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007b94:	da05      	bge.n	8007ba2 <__kernel_cosf+0x1e>
 8007b96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007b9a:	ee17 2a90 	vmov	r2, s15
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	d03d      	beq.n	8007c1e <__kernel_cosf+0x9a>
 8007ba2:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007ba6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007c24 <__kernel_cosf+0xa0>
 8007baa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007c28 <__kernel_cosf+0xa4>
 8007bae:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007c2c <__kernel_cosf+0xa8>
 8007bb2:	4a1f      	ldr	r2, [pc, #124]	; (8007c30 <__kernel_cosf+0xac>)
 8007bb4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007c34 <__kernel_cosf+0xb0>
 8007bbe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007bc2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007c38 <__kernel_cosf+0xb4>
 8007bc6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007bca:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007c3c <__kernel_cosf+0xb8>
 8007bce:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007bd2:	eeb0 7a66 	vmov.f32	s14, s13
 8007bd6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007bda:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007bde:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007be2:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007be6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007bea:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007bee:	dc04      	bgt.n	8007bfa <__kernel_cosf+0x76>
 8007bf0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007bf4:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007bf8:	4770      	bx	lr
 8007bfa:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <__kernel_cosf+0xbc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bfda      	itte	le
 8007c00:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007c04:	ee06 3a90 	vmovle	s13, r3
 8007c08:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007c0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c10:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c18:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c1c:	4770      	bx	lr
 8007c1e:	eeb0 0a46 	vmov.f32	s0, s12
 8007c22:	4770      	bx	lr
 8007c24:	ad47d74e 	.word	0xad47d74e
 8007c28:	310f74f6 	.word	0x310f74f6
 8007c2c:	3d2aaaab 	.word	0x3d2aaaab
 8007c30:	3e999999 	.word	0x3e999999
 8007c34:	b493f27c 	.word	0xb493f27c
 8007c38:	37d00d01 	.word	0x37d00d01
 8007c3c:	bab60b61 	.word	0xbab60b61
 8007c40:	3f480000 	.word	0x3f480000

08007c44 <__kernel_rem_pio2f>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	ed2d 8b04 	vpush	{d8-d9}
 8007c4c:	b0d9      	sub	sp, #356	; 0x164
 8007c4e:	4688      	mov	r8, r1
 8007c50:	9002      	str	r0, [sp, #8]
 8007c52:	49bb      	ldr	r1, [pc, #748]	; (8007f40 <__kernel_rem_pio2f+0x2fc>)
 8007c54:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007c5c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8007c60:	1e59      	subs	r1, r3, #1
 8007c62:	1d13      	adds	r3, r2, #4
 8007c64:	db27      	blt.n	8007cb6 <__kernel_rem_pio2f+0x72>
 8007c66:	f1b2 0b03 	subs.w	fp, r2, #3
 8007c6a:	bf48      	it	mi
 8007c6c:	f102 0b04 	addmi.w	fp, r2, #4
 8007c70:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007c74:	1c45      	adds	r5, r0, #1
 8007c76:	00ec      	lsls	r4, r5, #3
 8007c78:	1a47      	subs	r7, r0, r1
 8007c7a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8007f50 <__kernel_rem_pio2f+0x30c>
 8007c7e:	9403      	str	r4, [sp, #12]
 8007c80:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007c84:	eb0a 0c01 	add.w	ip, sl, r1
 8007c88:	ae1c      	add	r6, sp, #112	; 0x70
 8007c8a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8007c8e:	2400      	movs	r4, #0
 8007c90:	4564      	cmp	r4, ip
 8007c92:	dd12      	ble.n	8007cba <__kernel_rem_pio2f+0x76>
 8007c94:	9b01      	ldr	r3, [sp, #4]
 8007c96:	ac1c      	add	r4, sp, #112	; 0x70
 8007c98:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007c9c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8007ca0:	f04f 0c00 	mov.w	ip, #0
 8007ca4:	45d4      	cmp	ip, sl
 8007ca6:	dc27      	bgt.n	8007cf8 <__kernel_rem_pio2f+0xb4>
 8007ca8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007cac:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007f50 <__kernel_rem_pio2f+0x30c>
 8007cb0:	4627      	mov	r7, r4
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	e016      	b.n	8007ce4 <__kernel_rem_pio2f+0xa0>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e7dc      	b.n	8007c74 <__kernel_rem_pio2f+0x30>
 8007cba:	42e7      	cmn	r7, r4
 8007cbc:	bf5d      	ittte	pl
 8007cbe:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8007cc2:	ee07 3a90 	vmovpl	s15, r3
 8007cc6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007cca:	eef0 7a47 	vmovmi.f32	s15, s14
 8007cce:	ece6 7a01 	vstmia	r6!, {s15}
 8007cd2:	3401      	adds	r4, #1
 8007cd4:	e7dc      	b.n	8007c90 <__kernel_rem_pio2f+0x4c>
 8007cd6:	ecf9 6a01 	vldmia	r9!, {s13}
 8007cda:	ed97 7a00 	vldr	s14, [r7]
 8007cde:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	428e      	cmp	r6, r1
 8007ce6:	f1a7 0704 	sub.w	r7, r7, #4
 8007cea:	ddf4      	ble.n	8007cd6 <__kernel_rem_pio2f+0x92>
 8007cec:	eceb 7a01 	vstmia	fp!, {s15}
 8007cf0:	f10c 0c01 	add.w	ip, ip, #1
 8007cf4:	3404      	adds	r4, #4
 8007cf6:	e7d5      	b.n	8007ca4 <__kernel_rem_pio2f+0x60>
 8007cf8:	ab08      	add	r3, sp, #32
 8007cfa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007cfe:	eddf 8a93 	vldr	s17, [pc, #588]	; 8007f4c <__kernel_rem_pio2f+0x308>
 8007d02:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8007f48 <__kernel_rem_pio2f+0x304>
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007d0c:	4656      	mov	r6, sl
 8007d0e:	00b3      	lsls	r3, r6, #2
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	ab58      	add	r3, sp, #352	; 0x160
 8007d14:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007d18:	ac08      	add	r4, sp, #32
 8007d1a:	ab44      	add	r3, sp, #272	; 0x110
 8007d1c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007d20:	46a4      	mov	ip, r4
 8007d22:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007d26:	4637      	mov	r7, r6
 8007d28:	2f00      	cmp	r7, #0
 8007d2a:	f1a0 0004 	sub.w	r0, r0, #4
 8007d2e:	dc4f      	bgt.n	8007dd0 <__kernel_rem_pio2f+0x18c>
 8007d30:	4628      	mov	r0, r5
 8007d32:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007d36:	f000 fa8d 	bl	8008254 <scalbnf>
 8007d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8007d3e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007d42:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007d46:	f000 fa43 	bl	80081d0 <floorf>
 8007d4a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007d4e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007d58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007d5c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007d60:	ee17 9a90 	vmov	r9, s15
 8007d64:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007d68:	dd44      	ble.n	8007df4 <__kernel_rem_pio2f+0x1b0>
 8007d6a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8007d6e:	ab08      	add	r3, sp, #32
 8007d70:	f1c5 0e08 	rsb	lr, r5, #8
 8007d74:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8007d78:	fa47 f00e 	asr.w	r0, r7, lr
 8007d7c:	4481      	add	r9, r0
 8007d7e:	fa00 f00e 	lsl.w	r0, r0, lr
 8007d82:	1a3f      	subs	r7, r7, r0
 8007d84:	f1c5 0007 	rsb	r0, r5, #7
 8007d88:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007d8c:	4107      	asrs	r7, r0
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	dd3f      	ble.n	8007e12 <__kernel_rem_pio2f+0x1ce>
 8007d92:	f04f 0e00 	mov.w	lr, #0
 8007d96:	f109 0901 	add.w	r9, r9, #1
 8007d9a:	4673      	mov	r3, lr
 8007d9c:	4576      	cmp	r6, lr
 8007d9e:	dc6b      	bgt.n	8007e78 <__kernel_rem_pio2f+0x234>
 8007da0:	2d00      	cmp	r5, #0
 8007da2:	dd04      	ble.n	8007dae <__kernel_rem_pio2f+0x16a>
 8007da4:	2d01      	cmp	r5, #1
 8007da6:	d078      	beq.n	8007e9a <__kernel_rem_pio2f+0x256>
 8007da8:	2d02      	cmp	r5, #2
 8007daa:	f000 8081 	beq.w	8007eb0 <__kernel_rem_pio2f+0x26c>
 8007dae:	2f02      	cmp	r7, #2
 8007db0:	d12f      	bne.n	8007e12 <__kernel_rem_pio2f+0x1ce>
 8007db2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007db6:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007dba:	b353      	cbz	r3, 8007e12 <__kernel_rem_pio2f+0x1ce>
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007dc2:	f000 fa47 	bl	8008254 <scalbnf>
 8007dc6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007dca:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007dce:	e020      	b.n	8007e12 <__kernel_rem_pio2f+0x1ce>
 8007dd0:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007dd4:	3f01      	subs	r7, #1
 8007dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dde:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007de2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007de6:	ecac 0a01 	vstmia	ip!, {s0}
 8007dea:	ed90 0a00 	vldr	s0, [r0]
 8007dee:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007df2:	e799      	b.n	8007d28 <__kernel_rem_pio2f+0xe4>
 8007df4:	d105      	bne.n	8007e02 <__kernel_rem_pio2f+0x1be>
 8007df6:	1e70      	subs	r0, r6, #1
 8007df8:	ab08      	add	r3, sp, #32
 8007dfa:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007dfe:	11ff      	asrs	r7, r7, #7
 8007e00:	e7c5      	b.n	8007d8e <__kernel_rem_pio2f+0x14a>
 8007e02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007e06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0e:	da31      	bge.n	8007e74 <__kernel_rem_pio2f+0x230>
 8007e10:	2700      	movs	r7, #0
 8007e12:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	f040 809b 	bne.w	8007f54 <__kernel_rem_pio2f+0x310>
 8007e1e:	1e74      	subs	r4, r6, #1
 8007e20:	46a4      	mov	ip, r4
 8007e22:	2000      	movs	r0, #0
 8007e24:	45d4      	cmp	ip, sl
 8007e26:	da4a      	bge.n	8007ebe <__kernel_rem_pio2f+0x27a>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d07a      	beq.n	8007f22 <__kernel_rem_pio2f+0x2de>
 8007e2c:	ab08      	add	r3, sp, #32
 8007e2e:	3d08      	subs	r5, #8
 8007e30:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8081 	beq.w	8007f3c <__kernel_rem_pio2f+0x2f8>
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e40:	00a5      	lsls	r5, r4, #2
 8007e42:	f000 fa07 	bl	8008254 <scalbnf>
 8007e46:	aa44      	add	r2, sp, #272	; 0x110
 8007e48:	1d2b      	adds	r3, r5, #4
 8007e4a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007f4c <__kernel_rem_pio2f+0x308>
 8007e4e:	18d1      	adds	r1, r2, r3
 8007e50:	4622      	mov	r2, r4
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	f280 80ae 	bge.w	8007fb4 <__kernel_rem_pio2f+0x370>
 8007e58:	4622      	mov	r2, r4
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	f2c0 80cc 	blt.w	8007ff8 <__kernel_rem_pio2f+0x3b4>
 8007e60:	a944      	add	r1, sp, #272	; 0x110
 8007e62:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8007e66:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007f44 <__kernel_rem_pio2f+0x300>
 8007e6a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007f50 <__kernel_rem_pio2f+0x30c>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	1aa1      	subs	r1, r4, r2
 8007e72:	e0b6      	b.n	8007fe2 <__kernel_rem_pio2f+0x39e>
 8007e74:	2702      	movs	r7, #2
 8007e76:	e78c      	b.n	8007d92 <__kernel_rem_pio2f+0x14e>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	b94b      	cbnz	r3, 8007e90 <__kernel_rem_pio2f+0x24c>
 8007e7c:	b118      	cbz	r0, 8007e86 <__kernel_rem_pio2f+0x242>
 8007e7e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8007e82:	6020      	str	r0, [r4, #0]
 8007e84:	2001      	movs	r0, #1
 8007e86:	f10e 0e01 	add.w	lr, lr, #1
 8007e8a:	3404      	adds	r4, #4
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	e785      	b.n	8007d9c <__kernel_rem_pio2f+0x158>
 8007e90:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007e94:	6020      	str	r0, [r4, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	e7f5      	b.n	8007e86 <__kernel_rem_pio2f+0x242>
 8007e9a:	1e74      	subs	r4, r6, #1
 8007e9c:	a808      	add	r0, sp, #32
 8007e9e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007ea2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007ea6:	f10d 0c20 	add.w	ip, sp, #32
 8007eaa:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8007eae:	e77e      	b.n	8007dae <__kernel_rem_pio2f+0x16a>
 8007eb0:	1e74      	subs	r4, r6, #1
 8007eb2:	a808      	add	r0, sp, #32
 8007eb4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007eb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007ebc:	e7f3      	b.n	8007ea6 <__kernel_rem_pio2f+0x262>
 8007ebe:	ab08      	add	r3, sp, #32
 8007ec0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007ec4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007ec8:	4318      	orrs	r0, r3
 8007eca:	e7ab      	b.n	8007e24 <__kernel_rem_pio2f+0x1e0>
 8007ecc:	f10c 0c01 	add.w	ip, ip, #1
 8007ed0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8007ed4:	2c00      	cmp	r4, #0
 8007ed6:	d0f9      	beq.n	8007ecc <__kernel_rem_pio2f+0x288>
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007ede:	eb0d 0003 	add.w	r0, sp, r3
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	18f4      	adds	r4, r6, r3
 8007ee6:	ab1c      	add	r3, sp, #112	; 0x70
 8007ee8:	1c77      	adds	r7, r6, #1
 8007eea:	384c      	subs	r0, #76	; 0x4c
 8007eec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ef0:	4466      	add	r6, ip
 8007ef2:	42be      	cmp	r6, r7
 8007ef4:	f6ff af0b 	blt.w	8007d0e <__kernel_rem_pio2f+0xca>
 8007ef8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8007efc:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007f00:	ee07 3a90 	vmov	s15, r3
 8007f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f08:	f04f 0c00 	mov.w	ip, #0
 8007f0c:	ece4 7a01 	vstmia	r4!, {s15}
 8007f10:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007f50 <__kernel_rem_pio2f+0x30c>
 8007f14:	46a1      	mov	r9, r4
 8007f16:	458c      	cmp	ip, r1
 8007f18:	dd07      	ble.n	8007f2a <__kernel_rem_pio2f+0x2e6>
 8007f1a:	ece0 7a01 	vstmia	r0!, {s15}
 8007f1e:	3701      	adds	r7, #1
 8007f20:	e7e7      	b.n	8007ef2 <__kernel_rem_pio2f+0x2ae>
 8007f22:	9804      	ldr	r0, [sp, #16]
 8007f24:	f04f 0c01 	mov.w	ip, #1
 8007f28:	e7d2      	b.n	8007ed0 <__kernel_rem_pio2f+0x28c>
 8007f2a:	ecfe 6a01 	vldmia	lr!, {s13}
 8007f2e:	ed39 7a01 	vldmdb	r9!, {s14}
 8007f32:	f10c 0c01 	add.w	ip, ip, #1
 8007f36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007f3a:	e7ec      	b.n	8007f16 <__kernel_rem_pio2f+0x2d2>
 8007f3c:	3c01      	subs	r4, #1
 8007f3e:	e775      	b.n	8007e2c <__kernel_rem_pio2f+0x1e8>
 8007f40:	08008968 	.word	0x08008968
 8007f44:	0800893c 	.word	0x0800893c
 8007f48:	43800000 	.word	0x43800000
 8007f4c:	3b800000 	.word	0x3b800000
 8007f50:	00000000 	.word	0x00000000
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	eeb0 0a48 	vmov.f32	s0, s16
 8007f5a:	1a98      	subs	r0, r3, r2
 8007f5c:	f000 f97a 	bl	8008254 <scalbnf>
 8007f60:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007f48 <__kernel_rem_pio2f+0x304>
 8007f64:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6c:	db19      	blt.n	8007fa2 <__kernel_rem_pio2f+0x35e>
 8007f6e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007f4c <__kernel_rem_pio2f+0x308>
 8007f72:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007f76:	aa08      	add	r2, sp, #32
 8007f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f7c:	1c74      	adds	r4, r6, #1
 8007f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f82:	3508      	adds	r5, #8
 8007f84:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007f90:	ee10 3a10 	vmov	r3, s0
 8007f94:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007f98:	ee17 3a90 	vmov	r3, s15
 8007f9c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007fa0:	e74b      	b.n	8007e3a <__kernel_rem_pio2f+0x1f6>
 8007fa2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fa6:	aa08      	add	r2, sp, #32
 8007fa8:	ee10 3a10 	vmov	r3, s0
 8007fac:	4634      	mov	r4, r6
 8007fae:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007fb2:	e742      	b.n	8007e3a <__kernel_rem_pio2f+0x1f6>
 8007fb4:	a808      	add	r0, sp, #32
 8007fb6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007fba:	9001      	str	r0, [sp, #4]
 8007fbc:	ee07 0a90 	vmov	s15, r0
 8007fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fc4:	3a01      	subs	r2, #1
 8007fc6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007fca:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007fce:	ed61 7a01 	vstmdb	r1!, {s15}
 8007fd2:	e73e      	b.n	8007e52 <__kernel_rem_pio2f+0x20e>
 8007fd4:	ecfc 6a01 	vldmia	ip!, {s13}
 8007fd8:	ecb6 7a01 	vldmia	r6!, {s14}
 8007fdc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	4550      	cmp	r0, sl
 8007fe4:	dc01      	bgt.n	8007fea <__kernel_rem_pio2f+0x3a6>
 8007fe6:	4288      	cmp	r0, r1
 8007fe8:	ddf4      	ble.n	8007fd4 <__kernel_rem_pio2f+0x390>
 8007fea:	a858      	add	r0, sp, #352	; 0x160
 8007fec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ff0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007ff4:	3a01      	subs	r2, #1
 8007ff6:	e730      	b.n	8007e5a <__kernel_rem_pio2f+0x216>
 8007ff8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8007ffa:	2a02      	cmp	r2, #2
 8007ffc:	dc09      	bgt.n	8008012 <__kernel_rem_pio2f+0x3ce>
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	dc2a      	bgt.n	8008058 <__kernel_rem_pio2f+0x414>
 8008002:	d043      	beq.n	800808c <__kernel_rem_pio2f+0x448>
 8008004:	f009 0007 	and.w	r0, r9, #7
 8008008:	b059      	add	sp, #356	; 0x164
 800800a:	ecbd 8b04 	vpop	{d8-d9}
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008014:	2b03      	cmp	r3, #3
 8008016:	d1f5      	bne.n	8008004 <__kernel_rem_pio2f+0x3c0>
 8008018:	ab30      	add	r3, sp, #192	; 0xc0
 800801a:	442b      	add	r3, r5
 800801c:	461a      	mov	r2, r3
 800801e:	4619      	mov	r1, r3
 8008020:	4620      	mov	r0, r4
 8008022:	2800      	cmp	r0, #0
 8008024:	f1a1 0104 	sub.w	r1, r1, #4
 8008028:	dc51      	bgt.n	80080ce <__kernel_rem_pio2f+0x48a>
 800802a:	4621      	mov	r1, r4
 800802c:	2901      	cmp	r1, #1
 800802e:	f1a2 0204 	sub.w	r2, r2, #4
 8008032:	dc5c      	bgt.n	80080ee <__kernel_rem_pio2f+0x4aa>
 8008034:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8007f50 <__kernel_rem_pio2f+0x30c>
 8008038:	3304      	adds	r3, #4
 800803a:	2c01      	cmp	r4, #1
 800803c:	dc67      	bgt.n	800810e <__kernel_rem_pio2f+0x4ca>
 800803e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008042:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008046:	2f00      	cmp	r7, #0
 8008048:	d167      	bne.n	800811a <__kernel_rem_pio2f+0x4d6>
 800804a:	edc8 6a00 	vstr	s13, [r8]
 800804e:	ed88 7a01 	vstr	s14, [r8, #4]
 8008052:	edc8 7a02 	vstr	s15, [r8, #8]
 8008056:	e7d5      	b.n	8008004 <__kernel_rem_pio2f+0x3c0>
 8008058:	aa30      	add	r2, sp, #192	; 0xc0
 800805a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8007f50 <__kernel_rem_pio2f+0x30c>
 800805e:	4413      	add	r3, r2
 8008060:	4622      	mov	r2, r4
 8008062:	2a00      	cmp	r2, #0
 8008064:	da24      	bge.n	80080b0 <__kernel_rem_pio2f+0x46c>
 8008066:	b34f      	cbz	r7, 80080bc <__kernel_rem_pio2f+0x478>
 8008068:	eef1 7a47 	vneg.f32	s15, s14
 800806c:	edc8 7a00 	vstr	s15, [r8]
 8008070:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008078:	aa31      	add	r2, sp, #196	; 0xc4
 800807a:	2301      	movs	r3, #1
 800807c:	429c      	cmp	r4, r3
 800807e:	da20      	bge.n	80080c2 <__kernel_rem_pio2f+0x47e>
 8008080:	b10f      	cbz	r7, 8008086 <__kernel_rem_pio2f+0x442>
 8008082:	eef1 7a67 	vneg.f32	s15, s15
 8008086:	edc8 7a01 	vstr	s15, [r8, #4]
 800808a:	e7bb      	b.n	8008004 <__kernel_rem_pio2f+0x3c0>
 800808c:	aa30      	add	r2, sp, #192	; 0xc0
 800808e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8007f50 <__kernel_rem_pio2f+0x30c>
 8008092:	4413      	add	r3, r2
 8008094:	2c00      	cmp	r4, #0
 8008096:	da05      	bge.n	80080a4 <__kernel_rem_pio2f+0x460>
 8008098:	b10f      	cbz	r7, 800809e <__kernel_rem_pio2f+0x45a>
 800809a:	eef1 7a67 	vneg.f32	s15, s15
 800809e:	edc8 7a00 	vstr	s15, [r8]
 80080a2:	e7af      	b.n	8008004 <__kernel_rem_pio2f+0x3c0>
 80080a4:	ed33 7a01 	vldmdb	r3!, {s14}
 80080a8:	3c01      	subs	r4, #1
 80080aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080ae:	e7f1      	b.n	8008094 <__kernel_rem_pio2f+0x450>
 80080b0:	ed73 7a01 	vldmdb	r3!, {s15}
 80080b4:	3a01      	subs	r2, #1
 80080b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080ba:	e7d2      	b.n	8008062 <__kernel_rem_pio2f+0x41e>
 80080bc:	eef0 7a47 	vmov.f32	s15, s14
 80080c0:	e7d4      	b.n	800806c <__kernel_rem_pio2f+0x428>
 80080c2:	ecb2 7a01 	vldmia	r2!, {s14}
 80080c6:	3301      	adds	r3, #1
 80080c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080cc:	e7d6      	b.n	800807c <__kernel_rem_pio2f+0x438>
 80080ce:	edd1 7a00 	vldr	s15, [r1]
 80080d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80080d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80080da:	3801      	subs	r0, #1
 80080dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080e0:	ed81 7a00 	vstr	s14, [r1]
 80080e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e8:	edc1 7a01 	vstr	s15, [r1, #4]
 80080ec:	e799      	b.n	8008022 <__kernel_rem_pio2f+0x3de>
 80080ee:	edd2 7a00 	vldr	s15, [r2]
 80080f2:	edd2 6a01 	vldr	s13, [r2, #4]
 80080f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80080fa:	3901      	subs	r1, #1
 80080fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008100:	ed82 7a00 	vstr	s14, [r2]
 8008104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008108:	edc2 7a01 	vstr	s15, [r2, #4]
 800810c:	e78e      	b.n	800802c <__kernel_rem_pio2f+0x3e8>
 800810e:	ed33 7a01 	vldmdb	r3!, {s14}
 8008112:	3c01      	subs	r4, #1
 8008114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008118:	e78f      	b.n	800803a <__kernel_rem_pio2f+0x3f6>
 800811a:	eef1 6a66 	vneg.f32	s13, s13
 800811e:	eeb1 7a47 	vneg.f32	s14, s14
 8008122:	edc8 6a00 	vstr	s13, [r8]
 8008126:	ed88 7a01 	vstr	s14, [r8, #4]
 800812a:	eef1 7a67 	vneg.f32	s15, s15
 800812e:	e790      	b.n	8008052 <__kernel_rem_pio2f+0x40e>

08008130 <__kernel_sinf>:
 8008130:	ee10 3a10 	vmov	r3, s0
 8008134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008138:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800813c:	da04      	bge.n	8008148 <__kernel_sinf+0x18>
 800813e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008142:	ee17 3a90 	vmov	r3, s15
 8008146:	b35b      	cbz	r3, 80081a0 <__kernel_sinf+0x70>
 8008148:	ee20 7a00 	vmul.f32	s14, s0, s0
 800814c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80081a4 <__kernel_sinf+0x74>
 8008150:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80081a8 <__kernel_sinf+0x78>
 8008154:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008158:	eddf 7a14 	vldr	s15, [pc, #80]	; 80081ac <__kernel_sinf+0x7c>
 800815c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008160:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80081b0 <__kernel_sinf+0x80>
 8008164:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008168:	eddf 7a12 	vldr	s15, [pc, #72]	; 80081b4 <__kernel_sinf+0x84>
 800816c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008170:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008174:	b930      	cbnz	r0, 8008184 <__kernel_sinf+0x54>
 8008176:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80081b8 <__kernel_sinf+0x88>
 800817a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800817e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008182:	4770      	bx	lr
 8008184:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008188:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800818c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008190:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008194:	eddf 7a09 	vldr	s15, [pc, #36]	; 80081bc <__kernel_sinf+0x8c>
 8008198:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800819c:	ee30 0a60 	vsub.f32	s0, s0, s1
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	2f2ec9d3 	.word	0x2f2ec9d3
 80081a8:	b2d72f34 	.word	0xb2d72f34
 80081ac:	3638ef1b 	.word	0x3638ef1b
 80081b0:	b9500d01 	.word	0xb9500d01
 80081b4:	3c088889 	.word	0x3c088889
 80081b8:	be2aaaab 	.word	0xbe2aaaab
 80081bc:	3e2aaaab 	.word	0x3e2aaaab

080081c0 <fabsf>:
 80081c0:	ee10 3a10 	vmov	r3, s0
 80081c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081c8:	ee00 3a10 	vmov	s0, r3
 80081cc:	4770      	bx	lr
	...

080081d0 <floorf>:
 80081d0:	ee10 3a10 	vmov	r3, s0
 80081d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80081d8:	3a7f      	subs	r2, #127	; 0x7f
 80081da:	2a16      	cmp	r2, #22
 80081dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081e0:	dc2a      	bgt.n	8008238 <floorf+0x68>
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	da11      	bge.n	800820a <floorf+0x3a>
 80081e6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008248 <floorf+0x78>
 80081ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80081ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80081f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f6:	dd05      	ble.n	8008204 <floorf+0x34>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	da23      	bge.n	8008244 <floorf+0x74>
 80081fc:	4a13      	ldr	r2, [pc, #76]	; (800824c <floorf+0x7c>)
 80081fe:	2900      	cmp	r1, #0
 8008200:	bf18      	it	ne
 8008202:	4613      	movne	r3, r2
 8008204:	ee00 3a10 	vmov	s0, r3
 8008208:	4770      	bx	lr
 800820a:	4911      	ldr	r1, [pc, #68]	; (8008250 <floorf+0x80>)
 800820c:	4111      	asrs	r1, r2
 800820e:	420b      	tst	r3, r1
 8008210:	d0fa      	beq.n	8008208 <floorf+0x38>
 8008212:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008248 <floorf+0x78>
 8008216:	ee30 0a27 	vadd.f32	s0, s0, s15
 800821a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800821e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008222:	ddef      	ble.n	8008204 <floorf+0x34>
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfbe      	ittt	lt
 8008228:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800822c:	fa40 f202 	asrlt.w	r2, r0, r2
 8008230:	189b      	addlt	r3, r3, r2
 8008232:	ea23 0301 	bic.w	r3, r3, r1
 8008236:	e7e5      	b.n	8008204 <floorf+0x34>
 8008238:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800823c:	d3e4      	bcc.n	8008208 <floorf+0x38>
 800823e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008242:	4770      	bx	lr
 8008244:	2300      	movs	r3, #0
 8008246:	e7dd      	b.n	8008204 <floorf+0x34>
 8008248:	7149f2ca 	.word	0x7149f2ca
 800824c:	bf800000 	.word	0xbf800000
 8008250:	007fffff 	.word	0x007fffff

08008254 <scalbnf>:
 8008254:	ee10 3a10 	vmov	r3, s0
 8008258:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800825c:	d025      	beq.n	80082aa <scalbnf+0x56>
 800825e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008262:	d302      	bcc.n	800826a <scalbnf+0x16>
 8008264:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008268:	4770      	bx	lr
 800826a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800826e:	d122      	bne.n	80082b6 <scalbnf+0x62>
 8008270:	4b2a      	ldr	r3, [pc, #168]	; (800831c <scalbnf+0xc8>)
 8008272:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008320 <scalbnf+0xcc>
 8008276:	4298      	cmp	r0, r3
 8008278:	ee20 0a27 	vmul.f32	s0, s0, s15
 800827c:	db16      	blt.n	80082ac <scalbnf+0x58>
 800827e:	ee10 3a10 	vmov	r3, s0
 8008282:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008286:	3a19      	subs	r2, #25
 8008288:	4402      	add	r2, r0
 800828a:	2afe      	cmp	r2, #254	; 0xfe
 800828c:	dd15      	ble.n	80082ba <scalbnf+0x66>
 800828e:	ee10 3a10 	vmov	r3, s0
 8008292:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008324 <scalbnf+0xd0>
 8008296:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008328 <scalbnf+0xd4>
 800829a:	2b00      	cmp	r3, #0
 800829c:	eeb0 7a67 	vmov.f32	s14, s15
 80082a0:	bfb8      	it	lt
 80082a2:	eef0 7a66 	vmovlt.f32	s15, s13
 80082a6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80082aa:	4770      	bx	lr
 80082ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800832c <scalbnf+0xd8>
 80082b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80082b4:	4770      	bx	lr
 80082b6:	0dd2      	lsrs	r2, r2, #23
 80082b8:	e7e6      	b.n	8008288 <scalbnf+0x34>
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	dd06      	ble.n	80082cc <scalbnf+0x78>
 80082be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80082c6:	ee00 3a10 	vmov	s0, r3
 80082ca:	4770      	bx	lr
 80082cc:	f112 0f16 	cmn.w	r2, #22
 80082d0:	da1a      	bge.n	8008308 <scalbnf+0xb4>
 80082d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082d6:	4298      	cmp	r0, r3
 80082d8:	ee10 3a10 	vmov	r3, s0
 80082dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e0:	dd0a      	ble.n	80082f8 <scalbnf+0xa4>
 80082e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008324 <scalbnf+0xd0>
 80082e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008328 <scalbnf+0xd4>
 80082ea:	eef0 7a40 	vmov.f32	s15, s0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bf18      	it	ne
 80082f2:	eeb0 0a47 	vmovne.f32	s0, s14
 80082f6:	e7db      	b.n	80082b0 <scalbnf+0x5c>
 80082f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800832c <scalbnf+0xd8>
 80082fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008330 <scalbnf+0xdc>
 8008300:	eef0 7a40 	vmov.f32	s15, s0
 8008304:	2b00      	cmp	r3, #0
 8008306:	e7f3      	b.n	80082f0 <scalbnf+0x9c>
 8008308:	3219      	adds	r2, #25
 800830a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800830e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008312:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008334 <scalbnf+0xe0>
 8008316:	ee07 3a10 	vmov	s14, r3
 800831a:	e7c4      	b.n	80082a6 <scalbnf+0x52>
 800831c:	ffff3cb0 	.word	0xffff3cb0
 8008320:	4c000000 	.word	0x4c000000
 8008324:	7149f2ca 	.word	0x7149f2ca
 8008328:	f149f2ca 	.word	0xf149f2ca
 800832c:	0da24260 	.word	0x0da24260
 8008330:	8da24260 	.word	0x8da24260
 8008334:	33000000 	.word	0x33000000

08008338 <__libc_init_array>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	4d0d      	ldr	r5, [pc, #52]	; (8008370 <__libc_init_array+0x38>)
 800833c:	4c0d      	ldr	r4, [pc, #52]	; (8008374 <__libc_init_array+0x3c>)
 800833e:	1b64      	subs	r4, r4, r5
 8008340:	10a4      	asrs	r4, r4, #2
 8008342:	2600      	movs	r6, #0
 8008344:	42a6      	cmp	r6, r4
 8008346:	d109      	bne.n	800835c <__libc_init_array+0x24>
 8008348:	4d0b      	ldr	r5, [pc, #44]	; (8008378 <__libc_init_array+0x40>)
 800834a:	4c0c      	ldr	r4, [pc, #48]	; (800837c <__libc_init_array+0x44>)
 800834c:	f000 f8e4 	bl	8008518 <_init>
 8008350:	1b64      	subs	r4, r4, r5
 8008352:	10a4      	asrs	r4, r4, #2
 8008354:	2600      	movs	r6, #0
 8008356:	42a6      	cmp	r6, r4
 8008358:	d105      	bne.n	8008366 <__libc_init_array+0x2e>
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008360:	4798      	blx	r3
 8008362:	3601      	adds	r6, #1
 8008364:	e7ee      	b.n	8008344 <__libc_init_array+0xc>
 8008366:	f855 3b04 	ldr.w	r3, [r5], #4
 800836a:	4798      	blx	r3
 800836c:	3601      	adds	r6, #1
 800836e:	e7f2      	b.n	8008356 <__libc_init_array+0x1e>
 8008370:	080089dc 	.word	0x080089dc
 8008374:	080089dc 	.word	0x080089dc
 8008378:	080089dc 	.word	0x080089dc
 800837c:	080089e0 	.word	0x080089e0

08008380 <__retarget_lock_acquire_recursive>:
 8008380:	4770      	bx	lr

08008382 <__retarget_lock_release_recursive>:
 8008382:	4770      	bx	lr

08008384 <memset>:
 8008384:	4402      	add	r2, r0
 8008386:	4603      	mov	r3, r0
 8008388:	4293      	cmp	r3, r2
 800838a:	d100      	bne.n	800838e <memset+0xa>
 800838c:	4770      	bx	lr
 800838e:	f803 1b01 	strb.w	r1, [r3], #1
 8008392:	e7f9      	b.n	8008388 <memset+0x4>

08008394 <cleanup_glue>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	460c      	mov	r4, r1
 8008398:	6809      	ldr	r1, [r1, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	b109      	cbz	r1, 80083a2 <cleanup_glue+0xe>
 800839e:	f7ff fff9 	bl	8008394 <cleanup_glue>
 80083a2:	4621      	mov	r1, r4
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083aa:	f000 b869 	b.w	8008480 <_free_r>
	...

080083b0 <_reclaim_reent>:
 80083b0:	4b2c      	ldr	r3, [pc, #176]	; (8008464 <_reclaim_reent+0xb4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4283      	cmp	r3, r0
 80083b6:	b570      	push	{r4, r5, r6, lr}
 80083b8:	4604      	mov	r4, r0
 80083ba:	d051      	beq.n	8008460 <_reclaim_reent+0xb0>
 80083bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80083be:	b143      	cbz	r3, 80083d2 <_reclaim_reent+0x22>
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d14a      	bne.n	800845c <_reclaim_reent+0xac>
 80083c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	b111      	cbz	r1, 80083d2 <_reclaim_reent+0x22>
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 f857 	bl	8008480 <_free_r>
 80083d2:	6961      	ldr	r1, [r4, #20]
 80083d4:	b111      	cbz	r1, 80083dc <_reclaim_reent+0x2c>
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 f852 	bl	8008480 <_free_r>
 80083dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083de:	b111      	cbz	r1, 80083e6 <_reclaim_reent+0x36>
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 f84d 	bl	8008480 <_free_r>
 80083e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083e8:	b111      	cbz	r1, 80083f0 <_reclaim_reent+0x40>
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 f848 	bl	8008480 <_free_r>
 80083f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80083f2:	b111      	cbz	r1, 80083fa <_reclaim_reent+0x4a>
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 f843 	bl	8008480 <_free_r>
 80083fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083fc:	b111      	cbz	r1, 8008404 <_reclaim_reent+0x54>
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 f83e 	bl	8008480 <_free_r>
 8008404:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008406:	b111      	cbz	r1, 800840e <_reclaim_reent+0x5e>
 8008408:	4620      	mov	r0, r4
 800840a:	f000 f839 	bl	8008480 <_free_r>
 800840e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008410:	b111      	cbz	r1, 8008418 <_reclaim_reent+0x68>
 8008412:	4620      	mov	r0, r4
 8008414:	f000 f834 	bl	8008480 <_free_r>
 8008418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800841a:	b111      	cbz	r1, 8008422 <_reclaim_reent+0x72>
 800841c:	4620      	mov	r0, r4
 800841e:	f000 f82f 	bl	8008480 <_free_r>
 8008422:	69a3      	ldr	r3, [r4, #24]
 8008424:	b1e3      	cbz	r3, 8008460 <_reclaim_reent+0xb0>
 8008426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008428:	4620      	mov	r0, r4
 800842a:	4798      	blx	r3
 800842c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800842e:	b1b9      	cbz	r1, 8008460 <_reclaim_reent+0xb0>
 8008430:	4620      	mov	r0, r4
 8008432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008436:	f7ff bfad 	b.w	8008394 <cleanup_glue>
 800843a:	5949      	ldr	r1, [r1, r5]
 800843c:	b941      	cbnz	r1, 8008450 <_reclaim_reent+0xa0>
 800843e:	3504      	adds	r5, #4
 8008440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008442:	2d80      	cmp	r5, #128	; 0x80
 8008444:	68d9      	ldr	r1, [r3, #12]
 8008446:	d1f8      	bne.n	800843a <_reclaim_reent+0x8a>
 8008448:	4620      	mov	r0, r4
 800844a:	f000 f819 	bl	8008480 <_free_r>
 800844e:	e7ba      	b.n	80083c6 <_reclaim_reent+0x16>
 8008450:	680e      	ldr	r6, [r1, #0]
 8008452:	4620      	mov	r0, r4
 8008454:	f000 f814 	bl	8008480 <_free_r>
 8008458:	4631      	mov	r1, r6
 800845a:	e7ef      	b.n	800843c <_reclaim_reent+0x8c>
 800845c:	2500      	movs	r5, #0
 800845e:	e7ef      	b.n	8008440 <_reclaim_reent+0x90>
 8008460:	bd70      	pop	{r4, r5, r6, pc}
 8008462:	bf00      	nop
 8008464:	20000010 	.word	0x20000010

08008468 <__malloc_lock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_lock+0x8>)
 800846a:	f7ff bf89 	b.w	8008380 <__retarget_lock_acquire_recursive>
 800846e:	bf00      	nop
 8008470:	20004a21 	.word	0x20004a21

08008474 <__malloc_unlock>:
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__malloc_unlock+0x8>)
 8008476:	f7ff bf84 	b.w	8008382 <__retarget_lock_release_recursive>
 800847a:	bf00      	nop
 800847c:	20004a21 	.word	0x20004a21

08008480 <_free_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	2900      	cmp	r1, #0
 8008484:	d044      	beq.n	8008510 <_free_r+0x90>
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f1a1 0404 	sub.w	r4, r1, #4
 8008492:	bfb8      	it	lt
 8008494:	18e4      	addlt	r4, r4, r3
 8008496:	f7ff ffe7 	bl	8008468 <__malloc_lock>
 800849a:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <_free_r+0x94>)
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	b933      	cbnz	r3, 80084b0 <_free_r+0x30>
 80084a2:	6063      	str	r3, [r4, #4]
 80084a4:	6014      	str	r4, [r2, #0]
 80084a6:	b003      	add	sp, #12
 80084a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ac:	f7ff bfe2 	b.w	8008474 <__malloc_unlock>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d908      	bls.n	80084c6 <_free_r+0x46>
 80084b4:	6825      	ldr	r5, [r4, #0]
 80084b6:	1961      	adds	r1, r4, r5
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf01      	itttt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	1949      	addeq	r1, r1, r5
 80084c2:	6021      	streq	r1, [r4, #0]
 80084c4:	e7ed      	b.n	80084a2 <_free_r+0x22>
 80084c6:	461a      	mov	r2, r3
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b10b      	cbz	r3, 80084d0 <_free_r+0x50>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d9fa      	bls.n	80084c6 <_free_r+0x46>
 80084d0:	6811      	ldr	r1, [r2, #0]
 80084d2:	1855      	adds	r5, r2, r1
 80084d4:	42a5      	cmp	r5, r4
 80084d6:	d10b      	bne.n	80084f0 <_free_r+0x70>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	4421      	add	r1, r4
 80084dc:	1854      	adds	r4, r2, r1
 80084de:	42a3      	cmp	r3, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	d1e0      	bne.n	80084a6 <_free_r+0x26>
 80084e4:	681c      	ldr	r4, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	4421      	add	r1, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	e7da      	b.n	80084a6 <_free_r+0x26>
 80084f0:	d902      	bls.n	80084f8 <_free_r+0x78>
 80084f2:	230c      	movs	r3, #12
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	e7d6      	b.n	80084a6 <_free_r+0x26>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf04      	itt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	bf04      	itt	eq
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	6054      	str	r4, [r2, #4]
 800850e:	e7ca      	b.n	80084a6 <_free_r+0x26>
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	20004a24 	.word	0x20004a24

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
